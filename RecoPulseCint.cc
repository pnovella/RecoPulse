//
// File generated by rootcint at Thu Mar 12 14:30:53 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME RecoPulseCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "RecoPulseCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Qint Qint;
      #else
      class Qint  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Qint() throw() {};
         unsigned int _tmin; //
         unsigned int _tmax; //
         double _pedestal; //
         double _Q; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::fixedTimeQWindow fixedTimeQWindow;
      #else
      class fixedTimeQWindow  :  public ::Qint {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~fixedTimeQWindow() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::RecoPulseQ RecoPulseQ;
      #else
      class RecoPulseQ  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RecoPulseQ() throw() {};
         map< ::string, ::Qint* > _tools; //
         string _Qint; //
         ::Qint* _ptrQint; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::timeDef timeDef;
      #else
      class timeDef  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~timeDef() throw() {};
         int _T0; //
         int _T1; //window bounds
         int _Tstart; //
         int _Tend; //
         int _Tmax; //
         int _Trise; //
         int _Tfall; //
         string _timeAlgo; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::thresholdTime thresholdTime;
      #else
      class thresholdTime  :  public ::timeDef {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~thresholdTime() throw() {};
         double _threshold; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::RecoPulseTime RecoPulseTime;
      #else
      class RecoPulseTime  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RecoPulseTime() throw() {};
         map< ::string, ::timeDef* > _tools; //
         string _timeDef; //
         ::timeDef* _ptrtimeDef; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::RecoPulsePed RecoPulsePed;
      #else
      class RecoPulsePed  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RecoPulsePed() throw() {};
         double _mean; //
         double _RMS; //
         double _extMean; //
         double _extRMS; //
         double _maxMean; //
         double _minMean; //
         double _maxRMS; //
         unsigned int _tmin; //
         unsigned int _tmax; //
         unsigned int _wsize; //
         double _nsigma; //
         bool _pedAlgoisfull; //
         double _pedTol; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Algo Algo;
      #else
      class Algo  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Algo() throw() {};
         int _Tstart; //
         int _TstartError; //
         int _Tend; //
         int _Tmax; //
         int _Tfall; //
         int _Trise; //
         int _T0; //
         int _T1; //
         double _Q; //
         double _QError; //
         double _Imax; //
         double _Qmin; //
         double _Imin; //
         unsigned int _Wmin; //
         double _AWRmax; //
         double _ped; //
         double _pedRMS; //
         double _pedRMS_min; //
         int _pedStatus; //
         bool _useExtPedMean; //
         bool _useExtPedRMS; //
         bool _isBiPolar; //
         vector< double > _Qs; //
         vector< double > _QsError; //
         vector< int > _T0s; //
         vector< int > _T1s; //
         vector< int > _Ts; //
         vector< int > _Tends; //
         vector< int > _TsError; //
         vector< int > _Tmaxs; //
         vector< double > _Imaxs; //
         unsigned int _nFilter; //
         ::RecoPulseTime* timer; //
         ::RecoPulsePed* ped; //
         ::RecoPulseQ* charge; //
         bool _pedEvt; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::simpleWindow simpleWindow;
      #else
      class simpleWindow  :  public ::Algo {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~simpleWindow() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::RecoManager RecoManager;
      #else
      class RecoManager  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RecoManager() throw() {};
         map< ::string, ::Algo* > _algos; ///< algorithm storage
         ::Algo* _selectedalgo; //
         string _algo; ///< selected reconstruction algorithm
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void Qint_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Qint_Dictionary();
   static void delete_Qint(void *p);
   static void deleteArray_Qint(void *p);
   static void destruct_Qint(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Qint*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Qint) == sizeof(::ROOT::Shadow::Qint));
      ::Qint *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Qint),0);
      static ::ROOT::TGenericClassInfo 
         instance("Qint", "RecoPulseQ.h", 36,
                  typeid(::Qint), DefineBehavior(ptr, ptr),
                  &Qint_ShowMembers, &Qint_Dictionary, isa_proxy, 4,
                  sizeof(::Qint) );
      instance.SetDelete(&delete_Qint);
      instance.SetDeleteArray(&deleteArray_Qint);
      instance.SetDestructor(&destruct_Qint);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Qint*)
   {
      return GenerateInitInstanceLocal((::Qint*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Qint*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Qint_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Qint*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void fixedTimeQWindow_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void fixedTimeQWindow_Dictionary();
   static void *new_fixedTimeQWindow(void *p = 0);
   static void *newArray_fixedTimeQWindow(Long_t size, void *p);
   static void delete_fixedTimeQWindow(void *p);
   static void deleteArray_fixedTimeQWindow(void *p);
   static void destruct_fixedTimeQWindow(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::fixedTimeQWindow*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::fixedTimeQWindow) == sizeof(::ROOT::Shadow::fixedTimeQWindow));
      ::fixedTimeQWindow *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::fixedTimeQWindow),0);
      static ::ROOT::TGenericClassInfo 
         instance("fixedTimeQWindow", "RecoPulseQ.h", 96,
                  typeid(::fixedTimeQWindow), DefineBehavior(ptr, ptr),
                  &fixedTimeQWindow_ShowMembers, &fixedTimeQWindow_Dictionary, isa_proxy, 4,
                  sizeof(::fixedTimeQWindow) );
      instance.SetNew(&new_fixedTimeQWindow);
      instance.SetNewArray(&newArray_fixedTimeQWindow);
      instance.SetDelete(&delete_fixedTimeQWindow);
      instance.SetDeleteArray(&deleteArray_fixedTimeQWindow);
      instance.SetDestructor(&destruct_fixedTimeQWindow);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::fixedTimeQWindow*)
   {
      return GenerateInitInstanceLocal((::fixedTimeQWindow*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::fixedTimeQWindow*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void fixedTimeQWindow_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::fixedTimeQWindow*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RecoPulseQ_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RecoPulseQ_Dictionary();
   static void *new_RecoPulseQ(void *p = 0);
   static void *newArray_RecoPulseQ(Long_t size, void *p);
   static void delete_RecoPulseQ(void *p);
   static void deleteArray_RecoPulseQ(void *p);
   static void destruct_RecoPulseQ(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RecoPulseQ*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::RecoPulseQ) == sizeof(::ROOT::Shadow::RecoPulseQ));
      ::RecoPulseQ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RecoPulseQ),0);
      static ::ROOT::TGenericClassInfo 
         instance("RecoPulseQ", "RecoPulseQ.h", 165,
                  typeid(::RecoPulseQ), DefineBehavior(ptr, ptr),
                  &RecoPulseQ_ShowMembers, &RecoPulseQ_Dictionary, isa_proxy, 4,
                  sizeof(::RecoPulseQ) );
      instance.SetNew(&new_RecoPulseQ);
      instance.SetNewArray(&newArray_RecoPulseQ);
      instance.SetDelete(&delete_RecoPulseQ);
      instance.SetDeleteArray(&deleteArray_RecoPulseQ);
      instance.SetDestructor(&destruct_RecoPulseQ);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RecoPulseQ*)
   {
      return GenerateInitInstanceLocal((::RecoPulseQ*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RecoPulseQ*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RecoPulseQ_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::RecoPulseQ*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void timeDef_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void timeDef_Dictionary();
   static void delete_timeDef(void *p);
   static void deleteArray_timeDef(void *p);
   static void destruct_timeDef(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::timeDef*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::timeDef) == sizeof(::ROOT::Shadow::timeDef));
      ::timeDef *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::timeDef),0);
      static ::ROOT::TGenericClassInfo 
         instance("timeDef", "RecoPulseTime.h", 35,
                  typeid(::timeDef), DefineBehavior(ptr, ptr),
                  &timeDef_ShowMembers, &timeDef_Dictionary, isa_proxy, 4,
                  sizeof(::timeDef) );
      instance.SetDelete(&delete_timeDef);
      instance.SetDeleteArray(&deleteArray_timeDef);
      instance.SetDestructor(&destruct_timeDef);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::timeDef*)
   {
      return GenerateInitInstanceLocal((::timeDef*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::timeDef*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void timeDef_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::timeDef*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void thresholdTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void thresholdTime_Dictionary();
   static void *new_thresholdTime(void *p = 0);
   static void *newArray_thresholdTime(Long_t size, void *p);
   static void delete_thresholdTime(void *p);
   static void deleteArray_thresholdTime(void *p);
   static void destruct_thresholdTime(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::thresholdTime*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::thresholdTime) == sizeof(::ROOT::Shadow::thresholdTime));
      ::thresholdTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::thresholdTime),0);
      static ::ROOT::TGenericClassInfo 
         instance("thresholdTime", "RecoPulseTime.h", 121,
                  typeid(::thresholdTime), DefineBehavior(ptr, ptr),
                  &thresholdTime_ShowMembers, &thresholdTime_Dictionary, isa_proxy, 4,
                  sizeof(::thresholdTime) );
      instance.SetNew(&new_thresholdTime);
      instance.SetNewArray(&newArray_thresholdTime);
      instance.SetDelete(&delete_thresholdTime);
      instance.SetDeleteArray(&deleteArray_thresholdTime);
      instance.SetDestructor(&destruct_thresholdTime);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::thresholdTime*)
   {
      return GenerateInitInstanceLocal((::thresholdTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::thresholdTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void thresholdTime_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::thresholdTime*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RecoPulseTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RecoPulseTime_Dictionary();
   static void *new_RecoPulseTime(void *p = 0);
   static void *newArray_RecoPulseTime(Long_t size, void *p);
   static void delete_RecoPulseTime(void *p);
   static void deleteArray_RecoPulseTime(void *p);
   static void destruct_RecoPulseTime(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RecoPulseTime*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::RecoPulseTime) == sizeof(::ROOT::Shadow::RecoPulseTime));
      ::RecoPulseTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RecoPulseTime),0);
      static ::ROOT::TGenericClassInfo 
         instance("RecoPulseTime", "RecoPulseTime.h", 281,
                  typeid(::RecoPulseTime), DefineBehavior(ptr, ptr),
                  &RecoPulseTime_ShowMembers, &RecoPulseTime_Dictionary, isa_proxy, 4,
                  sizeof(::RecoPulseTime) );
      instance.SetNew(&new_RecoPulseTime);
      instance.SetNewArray(&newArray_RecoPulseTime);
      instance.SetDelete(&delete_RecoPulseTime);
      instance.SetDeleteArray(&deleteArray_RecoPulseTime);
      instance.SetDestructor(&destruct_RecoPulseTime);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RecoPulseTime*)
   {
      return GenerateInitInstanceLocal((::RecoPulseTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RecoPulseTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RecoPulseTime_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::RecoPulseTime*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RecoPulsePed_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RecoPulsePed_Dictionary();
   static void *new_RecoPulsePed(void *p = 0);
   static void *newArray_RecoPulsePed(Long_t size, void *p);
   static void delete_RecoPulsePed(void *p);
   static void deleteArray_RecoPulsePed(void *p);
   static void destruct_RecoPulsePed(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RecoPulsePed*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::RecoPulsePed) == sizeof(::ROOT::Shadow::RecoPulsePed));
      ::RecoPulsePed *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RecoPulsePed),0);
      static ::ROOT::TGenericClassInfo 
         instance("RecoPulsePed", "RecoPulsePed.h", 36,
                  typeid(::RecoPulsePed), DefineBehavior(ptr, ptr),
                  &RecoPulsePed_ShowMembers, &RecoPulsePed_Dictionary, isa_proxy, 4,
                  sizeof(::RecoPulsePed) );
      instance.SetNew(&new_RecoPulsePed);
      instance.SetNewArray(&newArray_RecoPulsePed);
      instance.SetDelete(&delete_RecoPulsePed);
      instance.SetDeleteArray(&deleteArray_RecoPulsePed);
      instance.SetDestructor(&destruct_RecoPulsePed);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RecoPulsePed*)
   {
      return GenerateInitInstanceLocal((::RecoPulsePed*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RecoPulsePed*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RecoPulsePed_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::RecoPulsePed*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Algo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Algo_Dictionary();
   static void delete_Algo(void *p);
   static void deleteArray_Algo(void *p);
   static void destruct_Algo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Algo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Algo) == sizeof(::ROOT::Shadow::Algo));
      ::Algo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Algo),0);
      static ::ROOT::TGenericClassInfo 
         instance("Algo", "RecoPulseAlgo.h", 41,
                  typeid(::Algo), DefineBehavior(ptr, ptr),
                  &Algo_ShowMembers, &Algo_Dictionary, isa_proxy, 4,
                  sizeof(::Algo) );
      instance.SetDelete(&delete_Algo);
      instance.SetDeleteArray(&deleteArray_Algo);
      instance.SetDestructor(&destruct_Algo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Algo*)
   {
      return GenerateInitInstanceLocal((::Algo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Algo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Algo_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Algo*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void simpleWindow_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void simpleWindow_Dictionary();
   static void *new_simpleWindow(void *p = 0);
   static void *newArray_simpleWindow(Long_t size, void *p);
   static void delete_simpleWindow(void *p);
   static void deleteArray_simpleWindow(void *p);
   static void destruct_simpleWindow(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::simpleWindow*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::simpleWindow) == sizeof(::ROOT::Shadow::simpleWindow));
      ::simpleWindow *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::simpleWindow),0);
      static ::ROOT::TGenericClassInfo 
         instance("simpleWindow", "RecoPulseAlgo.h", 412,
                  typeid(::simpleWindow), DefineBehavior(ptr, ptr),
                  &simpleWindow_ShowMembers, &simpleWindow_Dictionary, isa_proxy, 4,
                  sizeof(::simpleWindow) );
      instance.SetNew(&new_simpleWindow);
      instance.SetNewArray(&newArray_simpleWindow);
      instance.SetDelete(&delete_simpleWindow);
      instance.SetDeleteArray(&deleteArray_simpleWindow);
      instance.SetDestructor(&destruct_simpleWindow);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::simpleWindow*)
   {
      return GenerateInitInstanceLocal((::simpleWindow*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::simpleWindow*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void simpleWindow_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::simpleWindow*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RecoManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RecoManager_Dictionary();
   static void *new_RecoManager(void *p = 0);
   static void *newArray_RecoManager(Long_t size, void *p);
   static void delete_RecoManager(void *p);
   static void deleteArray_RecoManager(void *p);
   static void destruct_RecoManager(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RecoManager*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::RecoManager) == sizeof(::ROOT::Shadow::RecoManager));
      ::RecoManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RecoManager),0);
      static ::ROOT::TGenericClassInfo 
         instance("RecoManager", "./RecoManager.h", 31,
                  typeid(::RecoManager), DefineBehavior(ptr, ptr),
                  &RecoManager_ShowMembers, &RecoManager_Dictionary, isa_proxy, 4,
                  sizeof(::RecoManager) );
      instance.SetNew(&new_RecoManager);
      instance.SetNewArray(&newArray_RecoManager);
      instance.SetDelete(&delete_RecoManager);
      instance.SetDeleteArray(&deleteArray_RecoManager);
      instance.SetDestructor(&destruct_RecoManager);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RecoManager*)
   {
      return GenerateInitInstanceLocal((::RecoManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RecoManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RecoManager_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::RecoManager*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RecoPulse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RecoPulse(void *p = 0);
   static void *newArray_RecoPulse(Long_t size, void *p);
   static void delete_RecoPulse(void *p);
   static void deleteArray_RecoPulse(void *p);
   static void destruct_RecoPulse(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RecoPulse*)
   {
      ::RecoPulse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RecoPulse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RecoPulse", ::RecoPulse::Class_Version(), "./RecoPulse.h", 9,
                  typeid(::RecoPulse), DefineBehavior(ptr, ptr),
                  &::RecoPulse::Dictionary, isa_proxy, 4,
                  sizeof(::RecoPulse) );
      instance.SetNew(&new_RecoPulse);
      instance.SetNewArray(&newArray_RecoPulse);
      instance.SetDelete(&delete_RecoPulse);
      instance.SetDeleteArray(&deleteArray_RecoPulse);
      instance.SetDestructor(&destruct_RecoPulse);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RecoPulse*)
   {
      return GenerateInitInstanceLocal((::RecoPulse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RecoPulse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *RecoPulse::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *RecoPulse::Class_Name()
{
   return "RecoPulse";
}

//______________________________________________________________________________
const char *RecoPulse::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::RecoPulse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RecoPulse::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::RecoPulse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RecoPulse::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::RecoPulse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RecoPulse::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::RecoPulse*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void RecoPulse::Streamer(TBuffer &R__b)
{
   // Stream an object of class RecoPulse.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RecoPulse::Class(),this);
   } else {
      R__b.WriteClassBuffer(RecoPulse::Class(),this);
   }
}

//______________________________________________________________________________
void RecoPulse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RecoPulse.
      TClass *R__cl = ::RecoPulse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_recoMan", &_recoMan);
      //This works around a msvc bug and should be harmless on other platforms
      typedef gate::IAlgo baseClass1;
      baseClass1::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RecoPulse(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RecoPulse : new ::RecoPulse;
   }
   static void *newArray_RecoPulse(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RecoPulse[nElements] : new ::RecoPulse[nElements];
   }
   // Wrapper around operator delete
   static void delete_RecoPulse(void *p) {
      delete ((::RecoPulse*)p);
   }
   static void deleteArray_RecoPulse(void *p) {
      delete [] ((::RecoPulse*)p);
   }
   static void destruct_RecoPulse(void *p) {
      typedef ::RecoPulse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RecoPulse

//______________________________________________________________________________
namespace ROOT {
   void RecoManager_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class RecoManager.
      typedef ::ROOT::Shadow::RecoManager ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::RecoManager*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_algos", (void*)&sobj->_algos);
      R__insp.InspectMember("map<std::string,Algo*>", (void*)&sobj->_algos, "_algos.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_selectedalgo", &sobj->_selectedalgo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_algo", (void*)&sobj->_algo);
      R__insp.InspectMember("string", (void*)&sobj->_algo, "_algo.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RecoManager(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RecoManager : new ::RecoManager;
   }
   static void *newArray_RecoManager(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RecoManager[nElements] : new ::RecoManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_RecoManager(void *p) {
      delete ((::RecoManager*)p);
   }
   static void deleteArray_RecoManager(void *p) {
      delete [] ((::RecoManager*)p);
   }
   static void destruct_RecoManager(void *p) {
      typedef ::RecoManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RecoManager

//______________________________________________________________________________
namespace ROOT {
   void Algo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Algo.
      typedef ::ROOT::Shadow::Algo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Algo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Tstart", &sobj->_Tstart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_TstartError", &sobj->_TstartError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Tend", &sobj->_Tend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Tmax", &sobj->_Tmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Tfall", &sobj->_Tfall);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Trise", &sobj->_Trise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_T0", &sobj->_T0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_T1", &sobj->_T1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Q", &sobj->_Q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_QError", &sobj->_QError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Imax", &sobj->_Imax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Qmin", &sobj->_Qmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Imin", &sobj->_Imin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Wmin", &sobj->_Wmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_AWRmax", &sobj->_AWRmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ped", &sobj->_ped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pedRMS", &sobj->_pedRMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pedRMS_min", &sobj->_pedRMS_min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pedStatus", &sobj->_pedStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_useExtPedMean", &sobj->_useExtPedMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_useExtPedRMS", &sobj->_useExtPedRMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isBiPolar", &sobj->_isBiPolar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Qs", (void*)&sobj->_Qs);
      R__insp.InspectMember("vector<double>", (void*)&sobj->_Qs, "_Qs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_QsError", (void*)&sobj->_QsError);
      R__insp.InspectMember("vector<double>", (void*)&sobj->_QsError, "_QsError.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_T0s", (void*)&sobj->_T0s);
      R__insp.InspectMember("vector<int>", (void*)&sobj->_T0s, "_T0s.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_T1s", (void*)&sobj->_T1s);
      R__insp.InspectMember("vector<int>", (void*)&sobj->_T1s, "_T1s.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Ts", (void*)&sobj->_Ts);
      R__insp.InspectMember("vector<int>", (void*)&sobj->_Ts, "_Ts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Tends", (void*)&sobj->_Tends);
      R__insp.InspectMember("vector<int>", (void*)&sobj->_Tends, "_Tends.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_TsError", (void*)&sobj->_TsError);
      R__insp.InspectMember("vector<int>", (void*)&sobj->_TsError, "_TsError.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Tmaxs", (void*)&sobj->_Tmaxs);
      R__insp.InspectMember("vector<int>", (void*)&sobj->_Tmaxs, "_Tmaxs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Imaxs", (void*)&sobj->_Imaxs);
      R__insp.InspectMember("vector<double>", (void*)&sobj->_Imaxs, "_Imaxs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nFilter", &sobj->_nFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*timer", &sobj->timer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ped", &sobj->ped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*charge", &sobj->charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pedEvt", &sobj->_pedEvt);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_Algo(void *p) {
      delete ((::Algo*)p);
   }
   static void deleteArray_Algo(void *p) {
      delete [] ((::Algo*)p);
   }
   static void destruct_Algo(void *p) {
      typedef ::Algo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Algo

//______________________________________________________________________________
namespace ROOT {
   void simpleWindow_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class simpleWindow.
      typedef ::ROOT::Shadow::simpleWindow ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::simpleWindow*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("Algo", ( ::Algo * )( (::simpleWindow*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_simpleWindow(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::simpleWindow : new ::simpleWindow;
   }
   static void *newArray_simpleWindow(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::simpleWindow[nElements] : new ::simpleWindow[nElements];
   }
   // Wrapper around operator delete
   static void delete_simpleWindow(void *p) {
      delete ((::simpleWindow*)p);
   }
   static void deleteArray_simpleWindow(void *p) {
      delete [] ((::simpleWindow*)p);
   }
   static void destruct_simpleWindow(void *p) {
      typedef ::simpleWindow current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::simpleWindow

//______________________________________________________________________________
namespace ROOT {
   void RecoPulsePed_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class RecoPulsePed.
      typedef ::ROOT::Shadow::RecoPulsePed ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::RecoPulsePed*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mean", &sobj->_mean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_RMS", &sobj->_RMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_extMean", &sobj->_extMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_extRMS", &sobj->_extRMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_maxMean", &sobj->_maxMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_minMean", &sobj->_minMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_maxRMS", &sobj->_maxRMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tmin", &sobj->_tmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tmax", &sobj->_tmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_wsize", &sobj->_wsize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nsigma", &sobj->_nsigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pedAlgoisfull", &sobj->_pedAlgoisfull);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pedTol", &sobj->_pedTol);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RecoPulsePed(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RecoPulsePed : new ::RecoPulsePed;
   }
   static void *newArray_RecoPulsePed(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RecoPulsePed[nElements] : new ::RecoPulsePed[nElements];
   }
   // Wrapper around operator delete
   static void delete_RecoPulsePed(void *p) {
      delete ((::RecoPulsePed*)p);
   }
   static void deleteArray_RecoPulsePed(void *p) {
      delete [] ((::RecoPulsePed*)p);
   }
   static void destruct_RecoPulsePed(void *p) {
      typedef ::RecoPulsePed current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RecoPulsePed

//______________________________________________________________________________
namespace ROOT {
   void RecoPulseTime_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class RecoPulseTime.
      typedef ::ROOT::Shadow::RecoPulseTime ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::RecoPulseTime*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tools", (void*)&sobj->_tools);
      R__insp.InspectMember("map<std::string,timeDef*>", (void*)&sobj->_tools, "_tools.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_timeDef", (void*)&sobj->_timeDef);
      R__insp.InspectMember("string", (void*)&sobj->_timeDef, "_timeDef.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_ptrtimeDef", &sobj->_ptrtimeDef);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RecoPulseTime(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RecoPulseTime : new ::RecoPulseTime;
   }
   static void *newArray_RecoPulseTime(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RecoPulseTime[nElements] : new ::RecoPulseTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_RecoPulseTime(void *p) {
      delete ((::RecoPulseTime*)p);
   }
   static void deleteArray_RecoPulseTime(void *p) {
      delete [] ((::RecoPulseTime*)p);
   }
   static void destruct_RecoPulseTime(void *p) {
      typedef ::RecoPulseTime current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RecoPulseTime

//______________________________________________________________________________
namespace ROOT {
   void timeDef_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class timeDef.
      typedef ::ROOT::Shadow::timeDef ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::timeDef*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_T0", &sobj->_T0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_T1", &sobj->_T1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Tstart", &sobj->_Tstart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Tend", &sobj->_Tend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Tmax", &sobj->_Tmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Trise", &sobj->_Trise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Tfall", &sobj->_Tfall);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_timeAlgo", (void*)&sobj->_timeAlgo);
      R__insp.InspectMember("string", (void*)&sobj->_timeAlgo, "_timeAlgo.", false);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_timeDef(void *p) {
      delete ((::timeDef*)p);
   }
   static void deleteArray_timeDef(void *p) {
      delete [] ((::timeDef*)p);
   }
   static void destruct_timeDef(void *p) {
      typedef ::timeDef current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::timeDef

//______________________________________________________________________________
namespace ROOT {
   void thresholdTime_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class thresholdTime.
      typedef ::ROOT::Shadow::thresholdTime ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::thresholdTime*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_threshold", &sobj->_threshold);
      R__insp.GenericShowMembers("timeDef", ( ::timeDef * )( (::thresholdTime*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_thresholdTime(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::thresholdTime : new ::thresholdTime;
   }
   static void *newArray_thresholdTime(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::thresholdTime[nElements] : new ::thresholdTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_thresholdTime(void *p) {
      delete ((::thresholdTime*)p);
   }
   static void deleteArray_thresholdTime(void *p) {
      delete [] ((::thresholdTime*)p);
   }
   static void destruct_thresholdTime(void *p) {
      typedef ::thresholdTime current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::thresholdTime

//______________________________________________________________________________
namespace ROOT {
   void RecoPulseQ_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class RecoPulseQ.
      typedef ::ROOT::Shadow::RecoPulseQ ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::RecoPulseQ*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tools", (void*)&sobj->_tools);
      R__insp.InspectMember("map<std::string,Qint*>", (void*)&sobj->_tools, "_tools.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Qint", (void*)&sobj->_Qint);
      R__insp.InspectMember("string", (void*)&sobj->_Qint, "_Qint.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_ptrQint", &sobj->_ptrQint);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RecoPulseQ(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RecoPulseQ : new ::RecoPulseQ;
   }
   static void *newArray_RecoPulseQ(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RecoPulseQ[nElements] : new ::RecoPulseQ[nElements];
   }
   // Wrapper around operator delete
   static void delete_RecoPulseQ(void *p) {
      delete ((::RecoPulseQ*)p);
   }
   static void deleteArray_RecoPulseQ(void *p) {
      delete [] ((::RecoPulseQ*)p);
   }
   static void destruct_RecoPulseQ(void *p) {
      typedef ::RecoPulseQ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RecoPulseQ

//______________________________________________________________________________
namespace ROOT {
   void Qint_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Qint.
      typedef ::ROOT::Shadow::Qint ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Qint*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tmin", &sobj->_tmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tmax", &sobj->_tmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pedestal", &sobj->_pedestal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Q", &sobj->_Q);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_Qint(void *p) {
      delete ((::Qint*)p);
   }
   static void deleteArray_Qint(void *p) {
      delete [] ((::Qint*)p);
   }
   static void destruct_Qint(void *p) {
      typedef ::Qint current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Qint

//______________________________________________________________________________
namespace ROOT {
   void fixedTimeQWindow_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class fixedTimeQWindow.
      typedef ::ROOT::Shadow::fixedTimeQWindow ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::fixedTimeQWindow*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("Qint", ( ::Qint * )( (::fixedTimeQWindow*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_fixedTimeQWindow(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::fixedTimeQWindow : new ::fixedTimeQWindow;
   }
   static void *newArray_fixedTimeQWindow(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::fixedTimeQWindow[nElements] : new ::fixedTimeQWindow[nElements];
   }
   // Wrapper around operator delete
   static void delete_fixedTimeQWindow(void *p) {
      delete ((::fixedTimeQWindow*)p);
   }
   static void deleteArray_fixedTimeQWindow(void *p) {
      delete [] ((::fixedTimeQWindow*)p);
   }
   static void destruct_fixedTimeQWindow(void *p) {
      typedef ::fixedTimeQWindow current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::fixedTimeQWindow

namespace ROOT {
   void maplEstringcOAlgomUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOAlgomUgR_Dictionary();
   static void *new_maplEstringcOAlgomUgR(void *p = 0);
   static void *newArray_maplEstringcOAlgomUgR(Long_t size, void *p);
   static void delete_maplEstringcOAlgomUgR(void *p);
   static void deleteArray_maplEstringcOAlgomUgR(void *p);
   static void destruct_maplEstringcOAlgomUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,Algo*>*)
   {
      map<string,Algo*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,Algo*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,Algo*>", -2, "prec_stl/map", 63,
                  typeid(map<string,Algo*>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOAlgomUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,Algo*>) );
      instance.SetNew(&new_maplEstringcOAlgomUgR);
      instance.SetNewArray(&newArray_maplEstringcOAlgomUgR);
      instance.SetDelete(&delete_maplEstringcOAlgomUgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOAlgomUgR);
      instance.SetDestructor(&destruct_maplEstringcOAlgomUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,Algo*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,Algo*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOAlgomUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,Algo*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOAlgomUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,Algo*> : new map<string,Algo*>;
   }
   static void *newArray_maplEstringcOAlgomUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,Algo*>[nElements] : new map<string,Algo*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOAlgomUgR(void *p) {
      delete ((map<string,Algo*>*)p);
   }
   static void deleteArray_maplEstringcOAlgomUgR(void *p) {
      delete [] ((map<string,Algo*>*)p);
   }
   static void destruct_maplEstringcOAlgomUgR(void *p) {
      typedef map<string,Algo*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,Algo*>

namespace ROOT {
   void maplEstringcOQintmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOQintmUgR_Dictionary();
   static void *new_maplEstringcOQintmUgR(void *p = 0);
   static void *newArray_maplEstringcOQintmUgR(Long_t size, void *p);
   static void delete_maplEstringcOQintmUgR(void *p);
   static void deleteArray_maplEstringcOQintmUgR(void *p);
   static void destruct_maplEstringcOQintmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,Qint*>*)
   {
      map<string,Qint*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,Qint*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,Qint*>", -2, "prec_stl/map", 63,
                  typeid(map<string,Qint*>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOQintmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,Qint*>) );
      instance.SetNew(&new_maplEstringcOQintmUgR);
      instance.SetNewArray(&newArray_maplEstringcOQintmUgR);
      instance.SetDelete(&delete_maplEstringcOQintmUgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOQintmUgR);
      instance.SetDestructor(&destruct_maplEstringcOQintmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,Qint*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,Qint*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOQintmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,Qint*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOQintmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,Qint*> : new map<string,Qint*>;
   }
   static void *newArray_maplEstringcOQintmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,Qint*>[nElements] : new map<string,Qint*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOQintmUgR(void *p) {
      delete ((map<string,Qint*>*)p);
   }
   static void deleteArray_maplEstringcOQintmUgR(void *p) {
      delete [] ((map<string,Qint*>*)p);
   }
   static void destruct_maplEstringcOQintmUgR(void *p) {
      typedef map<string,Qint*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,Qint*>

namespace ROOT {
   void maplEstringcOtimeDefmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOtimeDefmUgR_Dictionary();
   static void *new_maplEstringcOtimeDefmUgR(void *p = 0);
   static void *newArray_maplEstringcOtimeDefmUgR(Long_t size, void *p);
   static void delete_maplEstringcOtimeDefmUgR(void *p);
   static void deleteArray_maplEstringcOtimeDefmUgR(void *p);
   static void destruct_maplEstringcOtimeDefmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,timeDef*>*)
   {
      map<string,timeDef*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,timeDef*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,timeDef*>", -2, "prec_stl/map", 63,
                  typeid(map<string,timeDef*>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOtimeDefmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,timeDef*>) );
      instance.SetNew(&new_maplEstringcOtimeDefmUgR);
      instance.SetNewArray(&newArray_maplEstringcOtimeDefmUgR);
      instance.SetDelete(&delete_maplEstringcOtimeDefmUgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOtimeDefmUgR);
      instance.SetDestructor(&destruct_maplEstringcOtimeDefmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,timeDef*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,timeDef*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOtimeDefmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,timeDef*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOtimeDefmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,timeDef*> : new map<string,timeDef*>;
   }
   static void *newArray_maplEstringcOtimeDefmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,timeDef*>[nElements] : new map<string,timeDef*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOtimeDefmUgR(void *p) {
      delete ((map<string,timeDef*>*)p);
   }
   static void deleteArray_maplEstringcOtimeDefmUgR(void *p) {
      delete [] ((map<string,timeDef*>*)p);
   }
   static void destruct_maplEstringcOtimeDefmUgR(void *p) {
      typedef map<string,timeDef*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,timeDef*>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* RecoPulseCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableRecoPulseCint();

extern "C" void G__set_cpp_environmentRecoPulseCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("RecoManager.h");
  G__add_compiledheader("RecoPulseAlgo.h");
  G__add_compiledheader("RecoPulse.h");
  G__add_compiledheader("RecoPulsePed.h");
  G__add_compiledheader("RecoPulseQ.h");
  G__add_compiledheader("RecoPulseTime.h");
  G__add_compiledheader("RecoPulseUtils.h");
  G__cpp_reset_tagtableRecoPulseCint();
}
#include <new>
extern "C" int G__cpp_dllrevRecoPulseCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Qint */
static int G__RecoPulseCint_417_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Qint*) G__getstructoffset())->computeQ(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Qint*) G__getstructoffset())->setWindow((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Qint*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Qint*) G__getstructoffset())->setPedestal((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Qint*) G__getstructoffset())->setTmin((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Qint*) G__getstructoffset())->setTmax((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Qint*) G__getstructoffset())->setQ((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Qint*) G__getstructoffset())->setWindowSize((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Qint*) G__getstructoffset())->getQ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Qint*) G__getstructoffset())->getPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Qint*) G__getstructoffset())->status());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Qint*) G__getstructoffset())->tmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Qint*) G__getstructoffset())->tmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_417_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Qint*) G__getstructoffset())->getWindowSize());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Qint G__TQint;
static int G__RecoPulseCint_417_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Qint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Qint*) (soff+(sizeof(Qint)*i)))->~G__TQint();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Qint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Qint*) (soff))->~G__TQint();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RecoPulseCint_417_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Qint* dest = (Qint*) G__getstructoffset();
   *dest = *(Qint*) libp->para[0].ref;
   const Qint& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* fixedTimeQWindow */
static int G__RecoPulseCint_418_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   fixedTimeQWindow* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new fixedTimeQWindow[n];
     } else {
       p = new((void*) gvp) fixedTimeQWindow[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new fixedTimeQWindow;
     } else {
       p = new((void*) gvp) fixedTimeQWindow;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_fixedTimeQWindow));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_418_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((fixedTimeQWindow*) G__getstructoffset())->computeQ(*(RPPulse*) libp->para[0].ref, (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RecoPulseCint_418_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   fixedTimeQWindow* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new fixedTimeQWindow(*(fixedTimeQWindow*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_fixedTimeQWindow));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef fixedTimeQWindow G__TfixedTimeQWindow;
static int G__RecoPulseCint_418_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (fixedTimeQWindow*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((fixedTimeQWindow*) (soff+(sizeof(fixedTimeQWindow)*i)))->~G__TfixedTimeQWindow();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (fixedTimeQWindow*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((fixedTimeQWindow*) (soff))->~G__TfixedTimeQWindow();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RecoPulseCint_418_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   fixedTimeQWindow* dest = (fixedTimeQWindow*) G__getstructoffset();
   *dest = *(fixedTimeQWindow*) libp->para[0].ref;
   const fixedTimeQWindow& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RecoPulseQ */
static int G__RecoPulseCint_422_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoPulseQ* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoPulseQ[n];
     } else {
       p = new((void*) gvp) RecoPulseQ[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoPulseQ;
     } else {
       p = new((void*) gvp) RecoPulseQ;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseQ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_422_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulseQ*) G__getstructoffset())->config(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_422_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoPulseQ*) G__getstructoffset())->computeQ(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_422_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulseQ*) G__getstructoffset())->setPedestal((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_422_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulseQ*) G__getstructoffset())->setWindow((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_422_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulseQ*) G__getstructoffset())->setWindowSize((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_422_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulseQ*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_422_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RecoPulseQ*) G__getstructoffset())->getQint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_422_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RecoPulseQ*) G__getstructoffset())->find(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_422_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((RecoPulseQ*) G__getstructoffset())->getWindowSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_422_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((RecoPulseQ*) G__getstructoffset())->getTmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_422_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((RecoPulseQ*) G__getstructoffset())->getTmax());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RecoPulseCint_422_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RecoPulseQ* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RecoPulseQ(*(RecoPulseQ*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseQ));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RecoPulseQ G__TRecoPulseQ;
static int G__RecoPulseCint_422_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RecoPulseQ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RecoPulseQ*) (soff+(sizeof(RecoPulseQ)*i)))->~G__TRecoPulseQ();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RecoPulseQ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RecoPulseQ*) (soff))->~G__TRecoPulseQ();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RecoPulseCint_422_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoPulseQ* dest = (RecoPulseQ*) G__getstructoffset();
   *dest = *(RecoPulseQ*) libp->para[0].ref;
   const RecoPulseQ& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* timeDef */
static int G__RecoPulseCint_449_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((timeDef*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((timeDef*) G__getstructoffset())->computeTstart(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((timeDef*) G__getstructoffset())->computeTend(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((timeDef*) G__getstructoffset())->computeT0(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((timeDef*) G__getstructoffset())->computeT1(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((timeDef*) G__getstructoffset())->computeTmax(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((timeDef*) G__getstructoffset())->computeTrise(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((timeDef*) G__getstructoffset())->computeTfall(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((timeDef*) G__getstructoffset())->setThreshold((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((timeDef*) G__getstructoffset())->setPedestal((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((timeDef*) G__getstructoffset())->setT0((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((timeDef*) G__getstructoffset())->setT1((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((timeDef*) G__getstructoffset())->setWindow((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((timeDef*) G__getstructoffset())->setTstart((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((timeDef*) G__getstructoffset())->setTend((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((timeDef*) G__getstructoffset())->setTmax((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((timeDef*) G__getstructoffset())->setTrise((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((timeDef*) G__getstructoffset())->setTfall((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((timeDef*) G__getstructoffset())->setTstartAlgo(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const timeDef*) G__getstructoffset())->getT0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const timeDef*) G__getstructoffset())->getT1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const timeDef*) G__getstructoffset())->getTstart());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const timeDef*) G__getstructoffset())->getTend());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const timeDef*) G__getstructoffset())->getTmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const timeDef*) G__getstructoffset())->getTise());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const timeDef*) G__getstructoffset())->getTfall());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_449_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const timeDef*) G__getstructoffset())->getTstartAlgo();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef timeDef G__TtimeDef;
static int G__RecoPulseCint_449_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (timeDef*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((timeDef*) (soff+(sizeof(timeDef)*i)))->~G__TtimeDef();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (timeDef*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((timeDef*) (soff))->~G__TtimeDef();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RecoPulseCint_449_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   timeDef* dest = (timeDef*) G__getstructoffset();
   *dest = *(timeDef*) libp->para[0].ref;
   const timeDef& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* thresholdTime */
static int G__RecoPulseCint_450_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   thresholdTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new thresholdTime((double) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) thresholdTime((double) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new thresholdTime[n];
       } else {
         p = new((void*) gvp) thresholdTime[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new thresholdTime;
       } else {
         p = new((void*) gvp) thresholdTime;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_thresholdTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_450_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((thresholdTime*) G__getstructoffset())->isOverThreshold((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_450_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const thresholdTime*) G__getstructoffset())->getThreshold());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_450_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const thresholdTime*) G__getstructoffset())->status());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RecoPulseCint_450_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   thresholdTime* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new thresholdTime(*(thresholdTime*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_thresholdTime));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef thresholdTime G__TthresholdTime;
static int G__RecoPulseCint_450_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (thresholdTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((thresholdTime*) (soff+(sizeof(thresholdTime)*i)))->~G__TthresholdTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (thresholdTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((thresholdTime*) (soff))->~G__TthresholdTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RecoPulseCint_450_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   thresholdTime* dest = (thresholdTime*) G__getstructoffset();
   *dest = *(thresholdTime*) libp->para[0].ref;
   const thresholdTime& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RecoPulseTime */
static int G__RecoPulseCint_453_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoPulseTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoPulseTime[n];
     } else {
       p = new((void*) gvp) RecoPulseTime[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoPulseTime;
     } else {
       p = new((void*) gvp) RecoPulseTime;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_453_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulseTime*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_453_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulseTime*) G__getstructoffset())->config(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_453_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RecoPulseTime*) G__getstructoffset())->getTimeDef());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_453_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoPulseTime*) G__getstructoffset())->computeT0(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_453_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoPulseTime*) G__getstructoffset())->computeT1(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_453_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoPulseTime*) G__getstructoffset())->computeTstart(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_453_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoPulseTime*) G__getstructoffset())->computeTend(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_453_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoPulseTime*) G__getstructoffset())->computeTmax(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_453_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoPulseTime*) G__getstructoffset())->computeTrise(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_453_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoPulseTime*) G__getstructoffset())->computeTfall(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_453_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RecoPulseTime*) G__getstructoffset())->find(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RecoPulseCint_453_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RecoPulseTime* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RecoPulseTime(*(RecoPulseTime*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseTime));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RecoPulseTime G__TRecoPulseTime;
static int G__RecoPulseCint_453_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RecoPulseTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RecoPulseTime*) (soff+(sizeof(RecoPulseTime)*i)))->~G__TRecoPulseTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RecoPulseTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RecoPulseTime*) (soff))->~G__TRecoPulseTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RecoPulseCint_453_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoPulseTime* dest = (RecoPulseTime*) G__getstructoffset();
   *dest = *(RecoPulseTime*) libp->para[0].ref;
   const RecoPulseTime& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RecoPulsePed */
static int G__RecoPulseCint_461_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoPulsePed* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoPulsePed[n];
     } else {
       p = new((void*) gvp) RecoPulsePed[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoPulsePed;
     } else {
       p = new((void*) gvp) RecoPulsePed;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulsePed));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulsePed*) G__getstructoffset())->config((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (size_t) G__int(libp->para[3])
, (size_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulsePed*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((RecoPulsePed*) G__getstructoffset())->computePedestal(*(RPPulse*) libp->para[0].ref, (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((RecoPulsePed*) G__getstructoffset())->computePedestal(*(RPPulse*) libp->para[0].ref, (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((RecoPulsePed*) G__getstructoffset())->computePedestal(*(RPPulse*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((RecoPulsePed*) G__getstructoffset())->computeOffsetPedestal(*(RPPulse*) libp->para[0].ref, (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((RecoPulsePed*) G__getstructoffset())->computeOffsetPedestal(*(RPPulse*) libp->para[0].ref, (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((RecoPulsePed*) G__getstructoffset())->computeOffsetPedestal(*(RPPulse*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RecoPulsePed*) G__getstructoffset())->computeFullPedestal(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulsePed*) G__getstructoffset())->setMaxMean((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulsePed*) G__getstructoffset())->setMinMean((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulsePed*) G__getstructoffset())->setMaxRMS((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulsePed*) G__getstructoffset())->setMean((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulsePed*) G__getstructoffset())->setRMS((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulsePed*) G__getstructoffset())->setExtMean((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulsePed*) G__getstructoffset())->setExtRMS((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulsePed*) G__getstructoffset())->setWindow((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulsePed*) G__getstructoffset())->setPedAlgo(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulsePed*) G__getstructoffset())->setNsigOverPed((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoPulsePed*) G__getstructoffset())->computeThreshold((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RecoPulsePed*) G__getstructoffset())->status());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const RecoPulsePed*) G__getstructoffset())->getMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const RecoPulsePed*) G__getstructoffset())->getRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const RecoPulsePed*) G__getstructoffset())->getExtMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const RecoPulsePed*) G__getstructoffset())->getExtRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const RecoPulsePed*) G__getstructoffset())->getNsigOverPed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const RecoPulsePed*) G__getstructoffset())->getWindowSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const RecoPulsePed*) G__getstructoffset())->getWindowMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const RecoPulsePed*) G__getstructoffset())->getWindowMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RecoPulsePed*) G__getstructoffset())->isGoodPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RecoPulsePed*) G__getstructoffset())->isGoodPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RecoPulsePed*) G__getstructoffset())->isGoodPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RecoPulsePed*) G__getstructoffset())->isGoodExtPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RecoPulsePed*) G__getstructoffset())->isGoodExtPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RecoPulsePed*) G__getstructoffset())->isGoodExtPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RecoPulsePed*) G__getstructoffset())->sameChExtPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RecoPulsePed*) G__getstructoffset())->sameChExtPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const RecoPulsePed*) G__getstructoffset())->getPedStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_461_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const RecoPulsePed*) G__getstructoffset())->getExtPedStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RecoPulseCint_461_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RecoPulsePed* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RecoPulsePed(*(RecoPulsePed*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulsePed));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RecoPulsePed G__TRecoPulsePed;
static int G__RecoPulseCint_461_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RecoPulsePed*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RecoPulsePed*) (soff+(sizeof(RecoPulsePed)*i)))->~G__TRecoPulsePed();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RecoPulsePed*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RecoPulsePed*) (soff))->~G__TRecoPulsePed();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RecoPulseCint_461_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoPulsePed* dest = (RecoPulsePed*) G__getstructoffset();
   *dest = *(RecoPulsePed*) libp->para[0].ref;
   const RecoPulsePed& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Algo */
static int G__RecoPulseCint_520_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Algo*) G__getstructoffset())->computeQ(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Algo*) G__getstructoffset())->computeT0(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Algo*) G__getstructoffset())->computeT1(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Algo*) G__getstructoffset())->computeTstart(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Algo*) G__getstructoffset())->computeTend(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Algo*) G__getstructoffset())->computeTmax(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Algo*) G__getstructoffset())->computeTrise(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Algo*) G__getstructoffset())->computeTfall(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Algo*) G__getstructoffset())->computePED(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Algo*) G__getstructoffset())->computeImax(*(RPPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setPedestal((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setExtPedestal((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setFilter((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->extendWindow(*(RPPulse*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setWindow((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setPEDwindow((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setPedMean((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setPedRMS((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setMinPedRMS((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setPedStatus((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->computeProfPedestal((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->useExtPedMean((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->useExtPedRMS((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Algo*) G__getstructoffset())->useExtPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Algo*) G__getstructoffset())->useExtPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setT0((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setT1((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setQmin((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setImin((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setWmin((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setAWRmax((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setWindowSize((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setChargeAna(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Algo*) G__getstructoffset())->setNsigOverPed((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Algo*) G__getstructoffset())->setNsigOverPed();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setMaxPEDMean((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setMinPEDMean((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setMaxPEDRMS((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setPedAlgo(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->setTstartAlgo(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Algo*) G__getstructoffset())->getQ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Algo*) G__getstructoffset())->getQerror());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Algo*) G__getstructoffset())->getT0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Algo*) G__getstructoffset())->getT1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Algo*) G__getstructoffset())->getTstart());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Algo*) G__getstructoffset())->getTstartError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Algo*) G__getstructoffset())->getTend());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Algo*) G__getstructoffset())->getTmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Algo*) G__getstructoffset())->getTfall());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Algo*) G__getstructoffset())->getTrise());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Algo*) G__getstructoffset())->getImax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const Algo*) G__getstructoffset())->getPeakT0s();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const Algo*) G__getstructoffset())->getPeakT1s();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double>* pobj;
         const vector<double> xobj = ((const Algo*) G__getstructoffset())->getPeakQs();
         pobj = new vector<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const Algo*) G__getstructoffset())->getPeakTs();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const Algo*) G__getstructoffset())->getPeakTends();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double>* pobj;
         const vector<double> xobj = ((const Algo*) G__getstructoffset())->getPeakQsError();
         pobj = new vector<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const Algo*) G__getstructoffset())->getPeakTsError();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const Algo*) G__getstructoffset())->getPeakTmaxs();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double>* pobj;
         const vector<double> xobj = ((const Algo*) G__getstructoffset())->getPeakImaxs();
         pobj = new vector<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Algo*) G__getstructoffset())->getPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Algo*) G__getstructoffset())->getPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Algo*) G__getstructoffset())->getExtPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Algo*) G__getstructoffset())->getExtPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Algo*) G__getstructoffset())->getChPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Algo*) G__getstructoffset())->getChPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Algo*) G__getstructoffset())->getPedStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Algo*) G__getstructoffset())->getPedWindowMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Algo*) G__getstructoffset())->getPedWindowMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Algo*) G__getstructoffset())->isGoodPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Algo*) G__getstructoffset())->isGoodPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Algo*) G__getstructoffset())->isGoodExtPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Algo*) G__getstructoffset())->isGoodExtPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Algo*) G__getstructoffset())->isBiPolar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Algo*) G__getstructoffset())->isGoodPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Algo*) G__getstructoffset())->isGoodExtPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Algo*) G__getstructoffset())->getPedWindowSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Algo*) G__getstructoffset())->sameChExtPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Algo*) G__getstructoffset())->getQmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->applyUserCuts(*(RPPulse*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_520_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Algo*) G__getstructoffset())->reco(*(RPPulse*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Algo G__TAlgo;
static int G__RecoPulseCint_520_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Algo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Algo*) (soff+(sizeof(Algo)*i)))->~G__TAlgo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Algo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Algo*) (soff))->~G__TAlgo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RecoPulseCint_520_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Algo* dest = (Algo*) G__getstructoffset();
   *dest = *(Algo*) libp->para[0].ref;
   const Algo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* simpleWindow */
static int G__RecoPulseCint_521_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   simpleWindow* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new simpleWindow((bool) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) simpleWindow((bool) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new simpleWindow[n];
       } else {
         p = new((void*) gvp) simpleWindow[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new simpleWindow;
       } else {
         p = new((void*) gvp) simpleWindow;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_simpleWindow));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RecoPulseCint_521_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   simpleWindow* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new simpleWindow(*(simpleWindow*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_simpleWindow));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef simpleWindow G__TsimpleWindow;
static int G__RecoPulseCint_521_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (simpleWindow*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((simpleWindow*) (soff+(sizeof(simpleWindow)*i)))->~G__TsimpleWindow();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (simpleWindow*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((simpleWindow*) (soff))->~G__TsimpleWindow();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RecoPulseCint_521_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   simpleWindow* dest = (simpleWindow*) G__getstructoffset();
   *dest = *(simpleWindow*) libp->para[0].ref;
   const simpleWindow& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RecoManager */
static int G__RecoPulseCint_527_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoManager[n];
     } else {
       p = new((void*) gvp) RecoManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoManager;
     } else {
       p = new((void*) gvp) RecoManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((RecoManager*) G__getstructoffset())->config(*((string*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((RecoManager*) G__getstructoffset())->config(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RecoManager*) G__getstructoffset())->getAlgo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RecoManager*) G__getstructoffset())->find(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const RecoManager*) G__getstructoffset())->getAlgoName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->reco(*(vector<unsigned short>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setChargeAna(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setQmin((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setImin((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setWmin((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setAWRmax((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoManager*) G__getstructoffset())->computeQ(*(vector<unsigned short>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->computeT0(*(vector<unsigned short>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->computeT1(*(vector<unsigned short>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->computeTstart(*(vector<unsigned short>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->computeTend(*(vector<unsigned short>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->computeTmax(*(vector<unsigned short>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->computeTrise(*(vector<unsigned short>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->computeTfall(*(vector<unsigned short>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->useExtPedMean((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->useExtPedRMS((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RecoManager*) G__getstructoffset())->useExtPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RecoManager*) G__getstructoffset())->useExtPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoManager*) G__getstructoffset())->computePED(*(vector<unsigned short>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setPEDwindow((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setExtPedestal((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setMinPedRMS((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->computeProfPedestal((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setNsigOverPed((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setMaxPEDMean((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setMinPEDMean((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setMaxPEDRMS((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setPedAlgo(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setCalibOn((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setTcalFile(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setQcalFile(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoManager*) G__getstructoffset())->setFilter((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->getT0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->getT1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->getTstart());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->getTstartError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->getTend());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->getTmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->getTrise());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->getTfall());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoManager*) G__getstructoffset())->getQ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoManager*) G__getstructoffset())->getImax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoManager*) G__getstructoffset())->getQerror());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((RecoManager*) G__getstructoffset())->getNpeaks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int>* pobj;
         vector<int> xobj = ((RecoManager*) G__getstructoffset())->getPeakIntTs();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int>* pobj;
         vector<int> xobj = ((RecoManager*) G__getstructoffset())->getPeakIntTends();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<double>* pobj;
         vector<double> xobj = ((RecoManager*) G__getstructoffset())->getPeakQs();
         pobj = new vector<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int>* pobj;
         vector<int> xobj = ((RecoManager*) G__getstructoffset())->getPeakTs();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int>* pobj;
         vector<int> xobj = ((RecoManager*) G__getstructoffset())->getPeakTends();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int>* pobj;
         vector<int> xobj = ((RecoManager*) G__getstructoffset())->getPeakTmaxs();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<double>* pobj;
         vector<double> xobj = ((RecoManager*) G__getstructoffset())->getPeakImaxs();
         pobj = new vector<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoManager*) G__getstructoffset())->getPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoManager*) G__getstructoffset())->getPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoManager*) G__getstructoffset())->getChPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoManager*) G__getstructoffset())->getChPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoManager*) G__getstructoffset())->getExtPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RecoManager*) G__getstructoffset())->getExtPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((RecoManager*) G__getstructoffset())->getPedWindowSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((RecoManager*) G__getstructoffset())->getPedWindowMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((RecoManager*) G__getstructoffset())->getPedWindowMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RecoManager*) G__getstructoffset())->getPedStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RecoManager*) G__getstructoffset())->isGoodPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RecoManager*) G__getstructoffset())->isGoodPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RecoManager*) G__getstructoffset())->isGoodExtPedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RecoManager*) G__getstructoffset())->isGoodExtPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RecoManager*) G__getstructoffset())->sameChExtPedRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RecoManager*) G__getstructoffset())->isBiPolar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RecoManager*) G__getstructoffset())->isGoodPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RecoManager*) G__getstructoffset())->isGoodExtPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_527_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RecoManager*) G__getstructoffset())->isGoodPulse());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RecoPulseCint_527_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RecoManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RecoManager(*(RecoManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RecoManager G__TRecoManager;
static int G__RecoPulseCint_527_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RecoManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RecoManager*) (soff+(sizeof(RecoManager)*i)))->~G__TRecoManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RecoManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RecoManager*) (soff))->~G__TRecoManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RecoPulseCint_527_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoManager* dest = (RecoManager*) G__getstructoffset();
   *dest = *(RecoManager*) libp->para[0].ref;
   const RecoManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RecoPulse */
static int G__RecoPulseCint_962_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoPulse* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoPulse((gate::VLEVEL) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) RecoPulse((gate::VLEVEL) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoPulse((gate::VLEVEL) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) RecoPulse((gate::VLEVEL) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new RecoPulse[n];
       } else {
         p = new((void*) gvp) RecoPulse[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new RecoPulse;
       } else {
         p = new((void*) gvp) RecoPulse;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_962_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoPulse* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoPulse(
*(gate::ParamStore*) libp->para[0].ref, (gate::VLEVEL) G__int(libp->para[1])
, *((string*) G__int(libp->para[2])));
     } else {
       p = new((void*) gvp) RecoPulse(
*(gate::ParamStore*) libp->para[0].ref, (gate::VLEVEL) G__int(libp->para[1])
, *((string*) G__int(libp->para[2])));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoPulse(*(gate::ParamStore*) libp->para[0].ref, (gate::VLEVEL) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) RecoPulse(*(gate::ParamStore*) libp->para[0].ref, (gate::VLEVEL) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RecoPulse(*(gate::ParamStore*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) RecoPulse(*(gate::ParamStore*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_962_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RecoPulse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_962_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RecoPulse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_962_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RecoPulse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_962_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RecoPulse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_962_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RecoPulse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_962_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RecoPulse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_962_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RecoPulse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_962_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RecoPulse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RecoPulseCint_962_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RecoPulse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RecoPulseCint_962_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RecoPulse* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RecoPulse(*(RecoPulse*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RecoPulse G__TRecoPulse;
static int G__RecoPulseCint_962_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RecoPulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RecoPulse*) (soff+(sizeof(RecoPulse)*i)))->~G__TRecoPulse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RecoPulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RecoPulse*) (soff))->~G__TRecoPulse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RecoPulseCint_962_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RecoPulse* dest = (RecoPulse*) G__getstructoffset();
   *dest = *(RecoPulse*) libp->para[0].ref;
   const RecoPulse& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Qint */

/* fixedTimeQWindow */

/* RecoPulseQ */

/* timeDef */

/* thresholdTime */

/* RecoPulseTime */

/* RecoPulsePed */

/* Algo */

/* simpleWindow */

/* RecoManager */

/* RecoPulse */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncRecoPulseCint {
 public:
  G__Sizep2memfuncRecoPulseCint(): p(&G__Sizep2memfuncRecoPulseCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncRecoPulseCint::*p)();
};

size_t G__get_sizep2memfuncRecoPulseCint()
{
  G__Sizep2memfuncRecoPulseCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceRecoPulseCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RecoPulseCintLN_fixedTimeQWindow))) {
     fixedTimeQWindow *G__Lderived;
     G__Lderived=(fixedTimeQWindow*)0x1000;
     {
       Qint *G__Lpbase=(Qint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_fixedTimeQWindow),G__get_linked_tagnum(&G__RecoPulseCintLN_Qint),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RecoPulseCintLN_thresholdTime))) {
     thresholdTime *G__Lderived;
     G__Lderived=(thresholdTime*)0x1000;
     {
       timeDef *G__Lpbase=(timeDef*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_thresholdTime),G__get_linked_tagnum(&G__RecoPulseCintLN_timeDef),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RecoPulseCintLN_simpleWindow))) {
     simpleWindow *G__Lderived;
     G__Lderived=(simpleWindow*)0x1000;
     {
       Algo *G__Lpbase=(Algo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_simpleWindow),G__get_linked_tagnum(&G__RecoPulseCintLN_Algo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulse))) {
     RecoPulse *G__Lderived;
     G__Lderived=(RecoPulse*)0x1000;
     {
       gate::IAlgo *G__Lpbase=(gate::IAlgo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulse),G__get_linked_tagnum(&G__RecoPulseCintLN_gatecLcLIAlgo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       gate::ParamStore *G__Lpbase=(gate::ParamStore*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulse),G__get_linked_tagnum(&G__RecoPulseCintLN_gatecLcLParamStore),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableRecoPulseCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,Qint*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOQintmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOQintmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Qint*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOQintmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOQintmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Qint*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOQintmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOQintmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Qint*,less<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOQintmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOQintmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,timeDef*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOtimeDefmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOtimeDefmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,timeDef*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOtimeDefmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOtimeDefmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,timeDef*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOtimeDefmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOtimeDefmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,timeDef*,less<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOtimeDefmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOtimeDefmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,Algo*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOAlgomUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Algo*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOAlgomUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Algo*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOAlgomUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Algo*,less<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOAlgomUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TObject*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlETObjectmUcOallocatorlETObjectmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlETObjectmUcOallocatorlETObjectmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,int>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,int>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,double>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,double>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("tstore<std::string>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_gatecLcLtstorelEstringgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_gate));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("tstore<string>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_gatecLcLtstorelEstringgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_gate));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,string>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string,less<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("tstore<gate::vdouble>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_gatecLcLtstorelEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_gate));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<double,allocator<double> >,less<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("tstore<gate::vint>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_gatecLcLtstorelEvectorlEintcOallocatorlEintgRsPgRsPgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_gate));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> >,less<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("tstore<gate::vstring>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_gatecLcLtstorelEvectorlEstringcOallocatorlEstringgRsPgRsPgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_gate));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,vector<string,allocator<string> > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<string,allocator<string> > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<string,allocator<string> > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<string,allocator<string> >,less<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<string,allocator<string> > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::vdouble>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::vint>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::vstring>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::string>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::string>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,gate::vstring>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,gate::vstring>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,gate::vint>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,gate::vint>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,gate::vdouble>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,gate::vdouble>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::Pulse*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLPulsemUcOallocatorlEgatecLcLPulsemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLPulsemUcOallocatorlEgatecLcLPulsemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLPulsemUcOallocatorlEgatecLcLPulsemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLPulsemUcOallocatorlEgatecLcLPulsemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLPulsemUcOallocatorlEgatecLcLPulsemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<double,double> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,double> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,double> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<BHit*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLBHitmUcOallocatorlEgatecLcLBHitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLBHitmUcOallocatorlEgatecLcLBHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLBHitmUcOallocatorlEgatecLcLBHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLBHitmUcOallocatorlEgatecLcLBHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLBHitmUcOallocatorlEgatecLcLBHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::BHit*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLBHitmUcOallocatorlEgatecLcLBHitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,double>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,double,less<int> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::map<int,double> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<map<int,double> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<map<int,double,less<int>,allocator<pair<const int,double> > > >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::Hit*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLHitmUcOallocatorlEgatecLcLHitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLHitmUcOallocatorlEgatecLcLHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLHitmUcOallocatorlEgatecLcLHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLHitmUcOallocatorlEgatecLcLHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLHitmUcOallocatorlEgatecLcLHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::BTrack*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLBTrackmUcOallocatorlEgatecLcLBTrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLBTrackmUcOallocatorlEgatecLcLBTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLBTrackmUcOallocatorlEgatecLcLBTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLBTrackmUcOallocatorlEgatecLcLBTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLBTrackmUcOallocatorlEgatecLcLBTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<const BTrack*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLBTrackmUcOallocatorlEconstsPgatecLcLBTrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLBTrackmUcOallocatorlEconstsPgatecLcLBTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLBTrackmUcOallocatorlEconstsPgatecLcLBTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLBTrackmUcOallocatorlEconstsPgatecLcLBTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLBTrackmUcOallocatorlEconstsPgatecLcLBTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<const gate::BTrack*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLBTrackmUcOallocatorlEconstsPgatecLcLBTrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<const gate::BParticle*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLBParticlemUcOallocatorlEconstsPgatecLcLBParticlemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLBParticlemUcOallocatorlEconstsPgatecLcLBParticlemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLBParticlemUcOallocatorlEconstsPgatecLcLBParticlemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLBParticlemUcOallocatorlEconstsPgatecLcLBParticlemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLBParticlemUcOallocatorlEconstsPgatecLcLBParticlemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<const gate::MCParticle*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLMCParticlemUcOallocatorlEconstsPgatecLcLMCParticlemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLMCParticlemUcOallocatorlEconstsPgatecLcLMCParticlemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLMCParticlemUcOallocatorlEconstsPgatecLcLMCParticlemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLMCParticlemUcOallocatorlEconstsPgatecLcLMCParticlemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLMCParticlemUcOallocatorlEconstsPgatecLcLMCParticlemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::HitMap*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLHitMapmUcOallocatorlEgatecLcLHitMapmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLHitMapmUcOallocatorlEgatecLcLHitMapmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLHitMapmUcOallocatorlEgatecLcLHitMapmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLHitMapmUcOallocatorlEgatecLcLHitMapmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLHitMapmUcOallocatorlEgatecLcLHitMapmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::Cluster*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLClustermUcOallocatorlEgatecLcLClustermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLClustermUcOallocatorlEgatecLcLClustermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLClustermUcOallocatorlEgatecLcLClustermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLClustermUcOallocatorlEgatecLcLClustermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLClustermUcOallocatorlEgatecLcLClustermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::Track*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLTrackmUcOallocatorlEgatecLcLTrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLTrackmUcOallocatorlEgatecLcLTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLTrackmUcOallocatorlEgatecLcLTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLTrackmUcOallocatorlEgatecLcLTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLTrackmUcOallocatorlEgatecLcLTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::Particle*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLParticlemUcOallocatorlEgatecLcLParticlemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLParticlemUcOallocatorlEgatecLcLParticlemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLParticlemUcOallocatorlEgatecLcLParticlemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLParticlemUcOallocatorlEgatecLcLParticlemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLParticlemUcOallocatorlEgatecLcLParticlemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::MCHit*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLMCHitmUcOallocatorlEgatecLcLMCHitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCHitmUcOallocatorlEgatecLcLMCHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLMCHitmUcOallocatorlEgatecLcLMCHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCHitmUcOallocatorlEgatecLcLMCHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLMCHitmUcOallocatorlEgatecLcLMCHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::MCTrack*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLMCTrackmUcOallocatorlEgatecLcLMCTrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCTrackmUcOallocatorlEgatecLcLMCTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLMCTrackmUcOallocatorlEgatecLcLMCTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCTrackmUcOallocatorlEgatecLcLMCTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLMCTrackmUcOallocatorlEgatecLcLMCTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::MCParticle*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLMCParticlemUcOallocatorlEgatecLcLMCParticlemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCParticlemUcOallocatorlEgatecLcLMCParticlemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLMCParticlemUcOallocatorlEgatecLcLMCParticlemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCParticlemUcOallocatorlEgatecLcLMCParticlemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLMCParticlemUcOallocatorlEgatecLcLMCParticlemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<gate::SENSORTYPE,gate::Hit*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLHitmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLHitmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<gate::SENSORTYPE,gate::Hit*,less<gate::SENSORTYPE> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLHitmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLHitmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<gate::SENSORTYPE,gate::HitMap*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLHitMapmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLHitMapmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<gate::SENSORTYPE,gate::HitMap*,less<gate::SENSORTYPE> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLHitMapmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLHitMapmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<gate::SENSORTYPE,gate::Cluster*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLClustermUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLClustermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<gate::SENSORTYPE,gate::Cluster*,less<gate::SENSORTYPE> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLClustermUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLClustermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<gate::SENSORTYPE,gate::Track*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLTrackmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLTrackmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<gate::SENSORTYPE,gate::Track*,less<gate::SENSORTYPE> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLTrackmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLTrackmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gate::IAlgo*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLIAlgomUcOallocatorlEgatecLcLIAlgomUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLIAlgomUcOallocatorlEgatecLcLIAlgomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLIAlgomUcOallocatorlEgatecLcLIAlgomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLIAlgomUcOallocatorlEgatecLcLIAlgomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEgatecLcLIAlgomUcOallocatorlEgatecLcLIAlgomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,gate::IAlgo*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOgatecLcLIAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgatecLcLIAlgomUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,gate::IAlgo*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOgatecLcLIAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgatecLcLIAlgomUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,gate::IAlgo*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOgatecLcLIAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgatecLcLIAlgomUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,gate::IAlgo*,less<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOgatecLcLIAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgatecLcLIAlgomUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,bool>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool,less<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator<std::string>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_allocatorlEstringgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator<string>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_allocatorlEstringgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string,std::allocator<std::string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string,std::allocator<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,gate::ParamStore>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOgatecLcLParamStorecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgatecLcLParamStoregRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,gate::ParamStore,less<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOgatecLcLParamStorecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgatecLcLParamStoregRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TH1*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOTH1mUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TH1*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOTH1mUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TH1*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOTH1mUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TH1*,less<string> >",117,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOTH1mUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH1*>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RecoPulseCintLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Qint */
static void G__setup_memvarQint(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_Qint));
   { Qint *p; p=(Qint*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("size_t"),-1,4,"_tmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("size_t"),-1,4,"_tmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_pedestal=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_Q=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* fixedTimeQWindow */
static void G__setup_memvarfixedTimeQWindow(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_fixedTimeQWindow));
   { fixedTimeQWindow *p; p=(fixedTimeQWindow*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* RecoPulseQ */
static void G__setup_memvarRecoPulseQ(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseQ));
   { RecoPulseQ *p; p=(RecoPulseQ*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOQintmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOQintmUgRsPgRsPgR),G__defined_typename("map<std::string,Qint*>"),-1,4,"_tools=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_string),-1,-1,4,"_Qint=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_Qint),-1,-1,4,"_ptrQint=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* timeDef */
static void G__setup_memvartimeDef(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_timeDef));
   { timeDef *p; p=(timeDef*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_T0=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_T1=",0,"window bounds");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_Tstart=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_Tend=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_Tmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_Trise=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_Tfall=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_string),-1,-1,2,"_timeAlgo=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* thresholdTime */
static void G__setup_memvarthresholdTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_thresholdTime));
   { thresholdTime *p; p=(thresholdTime*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_threshold=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RecoPulseTime */
static void G__setup_memvarRecoPulseTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseTime));
   { RecoPulseTime *p; p=(RecoPulseTime*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOtimeDefmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOtimeDefmUgRsPgRsPgR),G__defined_typename("map<std::string,timeDef*>"),-1,4,"_tools=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_string),-1,-1,4,"_timeDef=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_timeDef),-1,-1,4,"_ptrtimeDef=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RecoPulsePed */
static void G__setup_memvarRecoPulsePed(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulsePed));
   { RecoPulsePed *p; p=(RecoPulsePed*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_mean=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_RMS=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_extMean=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_extRMS=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_maxMean=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_minMean=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_maxRMS=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("size_t"),-1,4,"_tmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("size_t"),-1,4,"_tmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("size_t"),-1,4,"_wsize=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_nsigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_pedAlgoisfull=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_pedTol=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Algo */
static void G__setup_memvarAlgo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_Algo));
   { Algo *p; p=(Algo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_Tstart=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_TstartError=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_Tend=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_Tmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_Tfall=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_Trise=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_T0=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_T1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_Q=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_QError=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_Imax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_Qmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_Imin=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("size_t"),-1,2,"_Wmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_AWRmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_ped=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_pedRMS=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_pedRMS_min=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_pedStatus=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_useExtPedMean=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_useExtPedRMS=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_isBiPolar=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,2,"_Qs=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,2,"_QsError=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,2,"_T0s=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,2,"_T1s=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,2,"_Ts=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,2,"_Tends=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,2,"_TsError=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,2,"_Tmaxs=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,2,"_Imaxs=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("size_t"),-1,2,"_nFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseTime),-1,-1,4,"timer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulsePed),-1,-1,4,"ped=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseQ),-1,-1,4,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_pedEvt=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* simpleWindow */
static void G__setup_memvarsimpleWindow(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_simpleWindow));
   { simpleWindow *p; p=(simpleWindow*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* RecoManager */
static void G__setup_memvarRecoManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoManager));
   { RecoManager *p; p=(RecoManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_maplEstringcOAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOAlgomUgRsPgRsPgR),G__defined_typename("map<std::string,Algo*>"),-1,4,"_algos=",0,"/< algorithm storage");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_Algo),-1,-1,4,"_selectedalgo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_string),-1,-1,4,"_algo=",0,"/< selected reconstruction algorithm");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RecoPulse */
static void G__setup_memvarRecoPulse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulse));
   { RecoPulse *p; p=(RecoPulse*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_RecoManager),-1,-1,4,"_recoMan=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RecoPulseCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarRecoPulseCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncQint(void) {
   /* Qint */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_Qint));
   G__memfunc_setup("computeQ",846,G__RecoPulseCint_417_0_2, 100, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setWindow",964,G__RecoPulseCint_417_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'size_t' 0 - tmin h - 'size_t' 0 - tmax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reset",547,G__RecoPulseCint_417_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setPedestal",1150,G__RecoPulseCint_417_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - ped", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTmin",740,G__RecoPulseCint_417_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - tmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTmax",742,G__RecoPulseCint_417_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQ",413,G__RecoPulseCint_417_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - Q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWindowSize",1375,G__RecoPulseCint_417_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getQ",401,G__RecoPulseCint_417_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedestal",1138,G__RecoPulseCint_417_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("status",676,G__RecoPulseCint_417_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("tmin",440,G__RecoPulseCint_417_0_13, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tmax",442,G__RecoPulseCint_417_0_14, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWindowSize",1363,G__RecoPulseCint_417_0_15, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkWindow",1142,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 8, 
"h - 'size_t' 0 - - h - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkPedestal",1328,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Qint", 538, G__RecoPulseCint_417_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RecoPulseCint_417_0_19, (int) ('u'), G__get_linked_tagnum(&G__RecoPulseCintLN_Qint), -1, 1, 1, 1, 1, 0, "u 'Qint' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncfixedTimeQWindow(void) {
   /* fixedTimeQWindow */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_fixedTimeQWindow));
   G__memfunc_setup("fixedTimeQWindow",1640,G__RecoPulseCint_418_0_1, 105, G__get_linked_tagnum(&G__RecoPulseCintLN_fixedTimeQWindow), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeQ",846,(G__InterfaceMethod) NULL,100, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeQ",846,G__RecoPulseCint_418_0_3, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'RPPulse' - 1 - - h - 'size_t' 0 - tmin "
"h - 'size_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("fixedTimeQWindow", 1640, G__RecoPulseCint_418_0_4, (int) ('i'), G__get_linked_tagnum(&G__RecoPulseCintLN_fixedTimeQWindow), -1, 0, 1, 1, 1, 0, "u 'fixedTimeQWindow' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~fixedTimeQWindow", 1766, G__RecoPulseCint_418_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RecoPulseCint_418_0_6, (int) ('u'), G__get_linked_tagnum(&G__RecoPulseCintLN_fixedTimeQWindow), -1, 1, 1, 1, 1, 0, "u 'fixedTimeQWindow' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRecoPulseQ(void) {
   /* RecoPulseQ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseQ));
   G__memfunc_setup("RecoPulseQ",995,G__RecoPulseCint_422_0_1, 105, G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseQ), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("config",630,G__RecoPulseCint_422_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - qint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeQ",846,G__RecoPulseCint_422_0_3, 100, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPedestal",1150,G__RecoPulseCint_422_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWindow",964,G__RecoPulseCint_422_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'size_t' 0 - - h - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWindowSize",1375,G__RecoPulseCint_422_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__RecoPulseCint_422_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQint",732,G__RecoPulseCint_422_0_8, 85, G__get_linked_tagnum(&G__RecoPulseCintLN_Qint), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__RecoPulseCint_422_0_9, 103, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWindowSize",1363,G__RecoPulseCint_422_0_10, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTmin",728,G__RecoPulseCint_422_0_11, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTmax",730,G__RecoPulseCint_422_0_12, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkQint",922,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("RecoPulseQ", 995, G__RecoPulseCint_422_0_14, (int) ('i'), G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseQ), -1, 0, 1, 1, 1, 0, "u 'RecoPulseQ' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RecoPulseQ", 1121, G__RecoPulseCint_422_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RecoPulseCint_422_0_16, (int) ('u'), G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseQ), -1, 1, 1, 1, 1, 0, "u 'RecoPulseQ' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctimeDef(void) {
   /* timeDef */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_timeDef));
   G__memfunc_setup("reset",547,G__RecoPulseCint_449_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeTstart",1407,G__RecoPulseCint_449_0_3, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("computeTend",1160,G__RecoPulseCint_449_0_4, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("computeT0",897,G__RecoPulseCint_449_0_5, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeT1",898,G__RecoPulseCint_449_0_6, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeTmax",1175,G__RecoPulseCint_449_0_7, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeTrise",1284,G__RecoPulseCint_449_0_8, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeTfall",1264,G__RecoPulseCint_449_0_9, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setThreshold",1273,G__RecoPulseCint_449_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setPedestal",1150,G__RecoPulseCint_449_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setT0",464,G__RecoPulseCint_449_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - T0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setT1",465,G__RecoPulseCint_449_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - T1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWindow",964,G__RecoPulseCint_449_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - tmin i - - 0 - tmax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setTstart",974,G__RecoPulseCint_449_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - Tstart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTend",727,G__RecoPulseCint_449_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - Tend", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTmax",742,G__RecoPulseCint_449_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - T", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrise",851,G__RecoPulseCint_449_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - T", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTfall",831,G__RecoPulseCint_449_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - T", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTstartAlgo",1361,G__RecoPulseCint_449_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - algo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getT0",452,G__RecoPulseCint_449_0_21, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getT1",453,G__RecoPulseCint_449_0_22, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTstart",962,G__RecoPulseCint_449_0_23, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTend",715,G__RecoPulseCint_449_0_24, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTmax",730,G__RecoPulseCint_449_0_25, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTise",725,G__RecoPulseCint_449_0_26, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTfall",819,G__RecoPulseCint_449_0_27, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTstartAlgo",1349,G__RecoPulseCint_449_0_28, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~timeDef", 828, G__RecoPulseCint_449_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RecoPulseCint_449_0_30, (int) ('u'), G__get_linked_tagnum(&G__RecoPulseCintLN_timeDef), -1, 1, 1, 1, 1, 0, "u 'timeDef' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncthresholdTime(void) {
   /* thresholdTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_thresholdTime));
   G__memfunc_setup("thresholdTime",1372,G__RecoPulseCint_450_0_1, 105, G__get_linked_tagnum(&G__RecoPulseCintLN_thresholdTime), -1, 0, 1, 1, 1, 0, "d - - 0 '5' thr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeT0",897,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeT1",898,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeTstart",1407,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeTend",1160,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeTmax",1175,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isOverThreshold",1573,G__RecoPulseCint_450_0_7, 103, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThreshold",1261,G__RecoPulseCint_450_0_8, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("status",676,G__RecoPulseCint_450_0_9, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThreshold",1273,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - thr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("checkStatus",1154,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("thresholdTime", 1372, G__RecoPulseCint_450_0_12, (int) ('i'), G__get_linked_tagnum(&G__RecoPulseCintLN_thresholdTime), -1, 0, 1, 1, 1, 0, "u 'thresholdTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~thresholdTime", 1498, G__RecoPulseCint_450_0_13, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RecoPulseCint_450_0_14, (int) ('u'), G__get_linked_tagnum(&G__RecoPulseCintLN_thresholdTime), -1, 1, 1, 1, 1, 0, "u 'thresholdTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRecoPulseTime(void) {
   /* RecoPulseTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseTime));
   G__memfunc_setup("RecoPulseTime",1313,G__RecoPulseCint_453_0_1, 105, G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseTime), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__RecoPulseCint_453_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("config",630,G__RecoPulseCint_453_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeDef",990,G__RecoPulseCint_453_0_4, 85, G__get_linked_tagnum(&G__RecoPulseCintLN_timeDef), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeT0",897,G__RecoPulseCint_453_0_5, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeT1",898,G__RecoPulseCint_453_0_6, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeTstart",1407,G__RecoPulseCint_453_0_7, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeTend",1160,G__RecoPulseCint_453_0_8, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeTmax",1175,G__RecoPulseCint_453_0_9, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeTrise",1284,G__RecoPulseCint_453_0_10, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeTfall",1264,G__RecoPulseCint_453_0_11, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__RecoPulseCint_453_0_12, 103, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkTimeDef",1180,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("RecoPulseTime", 1313, G__RecoPulseCint_453_0_14, (int) ('i'), G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseTime), -1, 0, 1, 1, 1, 0, "u 'RecoPulseTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RecoPulseTime", 1439, G__RecoPulseCint_453_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RecoPulseCint_453_0_16, (int) ('u'), G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseTime), -1, 1, 1, 1, 1, 0, "u 'RecoPulseTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRecoPulsePed(void) {
   /* RecoPulsePed */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulsePed));
   G__memfunc_setup("RecoPulsePed",1195,G__RecoPulseCint_461_0_1, 105, G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulsePed), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("config",630,G__RecoPulseCint_461_0_2, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 - - h - 'size_t' 0 - - "
"h - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__RecoPulseCint_461_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computePedestal",1583,G__RecoPulseCint_461_0_4, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'RPPulse' - 1 - - h - 'size_t' 0 '0' tmin "
"h - 'size_t' 0 '0' tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeOffsetPedestal",2198,G__RecoPulseCint_461_0_5, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'RPPulse' - 1 - - h - 'size_t' 0 '0' tmin "
"h - 'size_t' 0 '0' tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeFullPedestal",1986,G__RecoPulseCint_461_0_6, 103, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxMean",1011,G__RecoPulseCint_461_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinMean",1009,G__RecoPulseCint_461_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxRMS",868,G__RecoPulseCint_461_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMean",717,G__RecoPulseCint_461_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - mean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRMS",574,G__RecoPulseCint_461_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExtMean",1022,G__RecoPulseCint_461_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - mean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExtRMS",879,G__RecoPulseCint_461_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWindow",964,G__RecoPulseCint_461_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'size_t' 0 - tmin h - 'size_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPedAlgo",1000,G__RecoPulseCint_461_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - algo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNsigOverPed",1426,G__RecoPulseCint_461_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - nsigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeThreshold",1706,G__RecoPulseCint_461_0_17, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("status",676,G__RecoPulseCint_461_0_18, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMean",705,G__RecoPulseCint_461_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRMS",562,G__RecoPulseCint_461_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExtMean",1010,G__RecoPulseCint_461_0_21, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExtRMS",867,G__RecoPulseCint_461_0_22, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNsigOverPed",1414,G__RecoPulseCint_461_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWindowSize",1363,G__RecoPulseCint_461_0_24, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWindowMin",1244,G__RecoPulseCint_461_0_25, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWindowMax",1246,G__RecoPulseCint_461_0_26, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodPedMean",1279,G__RecoPulseCint_461_0_27, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodPedRMS",1136,G__RecoPulseCint_461_0_28, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodPedestal",1431,G__RecoPulseCint_461_0_29, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodExtPedestal",1736,G__RecoPulseCint_461_0_30, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodExtPedMean",1584,G__RecoPulseCint_461_0_31, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodExtPedRMS",1441,G__RecoPulseCint_461_0_32, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sameChExtPedMean",1564,G__RecoPulseCint_461_0_33, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sameChExtPedRMS",1421,G__RecoPulseCint_461_0_34, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedStatus",1245,G__RecoPulseCint_461_0_35, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExtPedStatus",1550,G__RecoPulseCint_461_0_36, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkWindow",1142,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"h - 'size_t' 0 - - h - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkStatus",1154,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("RecoPulsePed", 1195, G__RecoPulseCint_461_0_39, (int) ('i'), G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulsePed), -1, 0, 1, 1, 1, 0, "u 'RecoPulsePed' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RecoPulsePed", 1321, G__RecoPulseCint_461_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RecoPulseCint_461_0_41, (int) ('u'), G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulsePed), -1, 1, 1, 1, 1, 0, "u 'RecoPulsePed' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAlgo(void) {
   /* Algo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_Algo));
   G__memfunc_setup("computeQ",846,G__RecoPulseCint_520_0_2, 100, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("computeT0",897,G__RecoPulseCint_520_0_3, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("computeT1",898,G__RecoPulseCint_520_0_4, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("computeTstart",1407,G__RecoPulseCint_520_0_5, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("computeTend",1160,G__RecoPulseCint_520_0_6, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("computeTmax",1175,G__RecoPulseCint_520_0_7, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("computeTrise",1284,G__RecoPulseCint_520_0_8, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("computeTfall",1264,G__RecoPulseCint_520_0_9, 105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("computePED",982,G__RecoPulseCint_520_0_10, 100, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("computeImax",1164,G__RecoPulseCint_520_0_11, 100, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPedestal",1150,G__RecoPulseCint_520_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setExtPedestal",1455,G__RecoPulseCint_520_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setFilter",946,G__RecoPulseCint_520_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - nfilter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("extendWindow",1280,G__RecoPulseCint_520_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - ipulse", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__RecoPulseCint_520_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setWindow",964,G__RecoPulseCint_520_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'size_t' 0 - t0 h - 'size_t' 0 - t1", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setPEDwindow",1213,G__RecoPulseCint_520_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'size_t' 0 - - h - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPedMean",998,G__RecoPulseCint_520_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - ped", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPedRMS",855,G__RecoPulseCint_520_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinPedRMS",1147,G__RecoPulseCint_520_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPedStatus",1257,G__RecoPulseCint_520_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeProfPedestal",1990,G__RecoPulseCint_520_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - ok", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useExtPedMean",1304,G__RecoPulseCint_520_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - ok", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useExtPedRMS",1161,G__RecoPulseCint_520_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - ok", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useExtPedMean",1304,G__RecoPulseCint_520_0_26, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useExtPedRMS",1161,G__RecoPulseCint_520_0_27, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setT0",464,G__RecoPulseCint_520_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - tmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setT1",465,G__RecoPulseCint_520_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQmin",737,G__RecoPulseCint_520_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setImin",729,G__RecoPulseCint_520_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - I", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWmin",743,G__RecoPulseCint_520_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setAWRmax",892,G__RecoPulseCint_520_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWindowSize",1375,G__RecoPulseCint_520_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setChargeAna",1190,G__RecoPulseCint_520_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setNsigOverPed",1426,G__RecoPulseCint_520_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '5' thr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxPEDMean",1228,G__RecoPulseCint_520_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinPEDMean",1226,G__RecoPulseCint_520_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxPEDRMS",1085,G__RecoPulseCint_520_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPedAlgo",1000,G__RecoPulseCint_520_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTstartAlgo",1361,G__RecoPulseCint_520_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQ",401,G__RecoPulseCint_520_0_42, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQerror",955,G__RecoPulseCint_520_0_43, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getT0",452,G__RecoPulseCint_520_0_44, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getT1",453,G__RecoPulseCint_520_0_45, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTstart",962,G__RecoPulseCint_520_0_46, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTstartError",1484,G__RecoPulseCint_520_0_47, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTend",715,G__RecoPulseCint_520_0_48, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTmax",730,G__RecoPulseCint_520_0_49, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTfall",819,G__RecoPulseCint_520_0_50, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrise",839,G__RecoPulseCint_520_0_51, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImax",719,G__RecoPulseCint_520_0_52, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakT0s",952,G__RecoPulseCint_520_0_53, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakT1s",953,G__RecoPulseCint_520_0_54, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakQs",901,G__RecoPulseCint_520_0_55, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakTs",904,G__RecoPulseCint_520_0_56, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakTends",1215,G__RecoPulseCint_520_0_57, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakQsError",1423,G__RecoPulseCint_520_0_58, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakTsError",1426,G__RecoPulseCint_520_0_59, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakTmaxs",1230,G__RecoPulseCint_520_0_60, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakImaxs",1219,G__RecoPulseCint_520_0_61, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedMean",986,G__RecoPulseCint_520_0_62, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedRMS",843,G__RecoPulseCint_520_0_63, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExtPedMean",1291,G__RecoPulseCint_520_0_64, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExtPedRMS",1148,G__RecoPulseCint_520_0_65, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChPedMean",1157,G__RecoPulseCint_520_0_66, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChPedRMS",1014,G__RecoPulseCint_520_0_67, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedStatus",1245,G__RecoPulseCint_520_0_68, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedWindowMin",1525,G__RecoPulseCint_520_0_69, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedWindowMax",1527,G__RecoPulseCint_520_0_70, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodPedMean",1279,G__RecoPulseCint_520_0_71, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodPedRMS",1136,G__RecoPulseCint_520_0_72, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodExtPedMean",1584,G__RecoPulseCint_520_0_73, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodExtPedRMS",1441,G__RecoPulseCint_520_0_74, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isBiPolar",901,G__RecoPulseCint_520_0_75, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodPedestal",1431,G__RecoPulseCint_520_0_76, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodExtPedestal",1736,G__RecoPulseCint_520_0_77, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedWindowSize",1644,G__RecoPulseCint_520_0_78, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sameChExtPedRMS",1421,G__RecoPulseCint_520_0_79, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQmin",725,G__RecoPulseCint_520_0_80, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("applyUserCuts",1380,G__RecoPulseCint_520_0_81, 121, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - ipulse", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reco",425,G__RecoPulseCint_520_0_82, 121, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTimer",833,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseTime), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedAna",873,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulsePed), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeAna",1178,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulseQ), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Algo", 513, G__RecoPulseCint_520_0_86, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RecoPulseCint_520_0_87, (int) ('u'), G__get_linked_tagnum(&G__RecoPulseCintLN_Algo), -1, 1, 1, 1, 1, 0, "u 'Algo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsimpleWindow(void) {
   /* simpleWindow */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_simpleWindow));
   G__memfunc_setup("simpleWindow",1282,G__RecoPulseCint_521_0_1, 105, G__get_linked_tagnum(&G__RecoPulseCintLN_simpleWindow), -1, 0, 1, 1, 1, 0, "g - - 0 'true' pedEvt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeQ",846,(G__InterfaceMethod) NULL,100, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeT0",897,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeT1",898,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeTstart",1407,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeTend",1160,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeTmax",1175,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeTrise",1284,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computeTfall",1264,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("computePED",982,(G__InterfaceMethod) NULL,100, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setPedestal",1150,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setExtPedestal",1455,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setWindow",964,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'size_t' 0 - - h - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reco",425,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'RPPulse' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reset",547,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("simpleWindow", 1282, G__RecoPulseCint_521_0_16, (int) ('i'), G__get_linked_tagnum(&G__RecoPulseCintLN_simpleWindow), -1, 0, 1, 1, 1, 0, "u 'simpleWindow' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~simpleWindow", 1408, G__RecoPulseCint_521_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RecoPulseCint_521_0_18, (int) ('u'), G__get_linked_tagnum(&G__RecoPulseCintLN_simpleWindow), -1, 1, 1, 1, 1, 0, "u 'simpleWindow' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRecoManager(void) {
   /* RecoManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoManager));
   G__memfunc_setup("RecoManager",1092,G__RecoPulseCint_527_0_1, 105, G__get_linked_tagnum(&G__RecoPulseCintLN_RecoManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("config",630,G__RecoPulseCint_527_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - algo g - - 0 'true' pedEvt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlgo",707,G__RecoPulseCint_527_0_3, 85, G__get_linked_tagnum(&G__RecoPulseCintLN_Algo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__RecoPulseCint_527_0_4, 103, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlgoName",1092,G__RecoPulseCint_527_0_5, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__RecoPulseCint_527_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reco",425,G__RecoPulseCint_527_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<unsigned short,allocator<unsigned short> >' 'vector<unsigned short>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChargeAna",1190,G__RecoPulseCint_527_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQmin",737,G__RecoPulseCint_527_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setImin",729,G__RecoPulseCint_527_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - I", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWmin",743,G__RecoPulseCint_527_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAWRmax",892,G__RecoPulseCint_527_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeQ",846,G__RecoPulseCint_527_0_13, 100, -1, -1, 0, 1, 1, 1, 0, "u 'vector<unsigned short,allocator<unsigned short> >' 'vector<unsigned short>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeT0",897,G__RecoPulseCint_527_0_14, 105, -1, -1, 0, 1, 1, 1, 0, "u 'vector<unsigned short,allocator<unsigned short> >' 'vector<unsigned short>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeT1",898,G__RecoPulseCint_527_0_15, 105, -1, -1, 0, 1, 1, 1, 0, "u 'vector<unsigned short,allocator<unsigned short> >' 'vector<unsigned short>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeTstart",1407,G__RecoPulseCint_527_0_16, 105, -1, -1, 0, 1, 1, 1, 0, "u 'vector<unsigned short,allocator<unsigned short> >' 'vector<unsigned short>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeTend",1160,G__RecoPulseCint_527_0_17, 105, -1, -1, 0, 1, 1, 1, 0, "u 'vector<unsigned short,allocator<unsigned short> >' 'vector<unsigned short>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeTmax",1175,G__RecoPulseCint_527_0_18, 105, -1, -1, 0, 1, 1, 1, 0, "u 'vector<unsigned short,allocator<unsigned short> >' 'vector<unsigned short>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeTrise",1284,G__RecoPulseCint_527_0_19, 105, -1, -1, 0, 1, 1, 1, 0, "u 'vector<unsigned short,allocator<unsigned short> >' 'vector<unsigned short>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeTfall",1264,G__RecoPulseCint_527_0_20, 105, -1, -1, 0, 1, 1, 1, 0, "u 'vector<unsigned short,allocator<unsigned short> >' 'vector<unsigned short>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useExtPedMean",1304,G__RecoPulseCint_527_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - ok", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useExtPedRMS",1161,G__RecoPulseCint_527_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - ok", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useExtPedMean",1304,G__RecoPulseCint_527_0_23, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useExtPedRMS",1161,G__RecoPulseCint_527_0_24, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computePED",982,G__RecoPulseCint_527_0_25, 100, -1, -1, 0, 1, 1, 1, 0, "u 'vector<unsigned short,allocator<unsigned short> >' 'vector<unsigned short>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPEDwindow",1213,G__RecoPulseCint_527_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'size_t' 0 - - h - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExtPedestal",1455,G__RecoPulseCint_527_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - ped d - - 0 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinPedRMS",1147,G__RecoPulseCint_527_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeProfPedestal",1990,G__RecoPulseCint_527_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - ok", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNsigOverPed",1426,G__RecoPulseCint_527_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - nsigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxPEDMean",1228,G__RecoPulseCint_527_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinPEDMean",1226,G__RecoPulseCint_527_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxPEDRMS",1085,G__RecoPulseCint_527_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPedAlgo",1000,G__RecoPulseCint_527_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCalibOn",996,G__RecoPulseCint_527_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTcalFile",1104,G__RecoPulseCint_527_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQcalFile",1101,G__RecoPulseCint_527_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFilter",946,G__RecoPulseCint_527_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getT0",452,G__RecoPulseCint_527_0_39, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getT1",453,G__RecoPulseCint_527_0_40, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTstart",962,G__RecoPulseCint_527_0_41, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTstartError",1484,G__RecoPulseCint_527_0_42, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTend",715,G__RecoPulseCint_527_0_43, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTmax",730,G__RecoPulseCint_527_0_44, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrise",839,G__RecoPulseCint_527_0_45, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTfall",819,G__RecoPulseCint_527_0_46, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQ",401,G__RecoPulseCint_527_0_47, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImax",719,G__RecoPulseCint_527_0_48, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQerror",955,G__RecoPulseCint_527_0_49, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNpeaks",930,G__RecoPulseCint_527_0_50, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakIntTs",1203,G__RecoPulseCint_527_0_51, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakIntTends",1514,G__RecoPulseCint_527_0_52, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakQs",901,G__RecoPulseCint_527_0_53, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakTs",904,G__RecoPulseCint_527_0_54, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakTends",1215,G__RecoPulseCint_527_0_55, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakTmaxs",1230,G__RecoPulseCint_527_0_56, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakImaxs",1219,G__RecoPulseCint_527_0_57, 117, G__get_linked_tagnum(&G__RecoPulseCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedMean",986,G__RecoPulseCint_527_0_58, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedRMS",843,G__RecoPulseCint_527_0_59, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChPedMean",1157,G__RecoPulseCint_527_0_60, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChPedRMS",1014,G__RecoPulseCint_527_0_61, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExtPedMean",1291,G__RecoPulseCint_527_0_62, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExtPedRMS",1148,G__RecoPulseCint_527_0_63, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedWindowSize",1644,G__RecoPulseCint_527_0_64, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedWindowMin",1525,G__RecoPulseCint_527_0_65, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedWindowMax",1527,G__RecoPulseCint_527_0_66, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedStatus",1245,G__RecoPulseCint_527_0_67, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodPedMean",1279,G__RecoPulseCint_527_0_68, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodPedRMS",1136,G__RecoPulseCint_527_0_69, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodExtPedMean",1584,G__RecoPulseCint_527_0_70, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodExtPedRMS",1441,G__RecoPulseCint_527_0_71, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sameChExtPedRMS",1421,G__RecoPulseCint_527_0_72, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isBiPolar",901,G__RecoPulseCint_527_0_73, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodPedestal",1431,G__RecoPulseCint_527_0_74, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodExtPedestal",1736,G__RecoPulseCint_527_0_75, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodPulse",1134,G__RecoPulseCint_527_0_76, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkAlgo",897,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("RecoManager", 1092, G__RecoPulseCint_527_0_78, (int) ('i'), G__get_linked_tagnum(&G__RecoPulseCintLN_RecoManager), -1, 0, 1, 1, 1, 0, "u 'RecoManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RecoManager", 1218, G__RecoPulseCint_527_0_79, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RecoPulseCint_527_0_80, (int) ('u'), G__get_linked_tagnum(&G__RecoPulseCintLN_RecoManager), -1, 1, 1, 1, 1, 0, "u 'RecoManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRecoPulse(void) {
   /* RecoPulse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulse));
   G__memfunc_setup("RecoPulse",914,G__RecoPulseCint_962_0_1, 105, G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulse), -1, 0, 2, 1, 1, 0, 
"i 'gate::VLEVEL' - 0 'gate::NORMAL' - u 'string' - 0 '\"RecoPulseInstance\"' label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecoPulse",914,G__RecoPulseCint_962_0_2, 105, G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulse), -1, 0, 3, 1, 1, 0, 
"u 'gate::ParamStore' - 11 - gs i 'gate::VLEVEL' - 0 'gate::NORMAL' - "
"u 'string' - 0 '\"RecoPulseInstance\"' label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initialize",1074,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,103, -1, -1, 0, 1, 1, 1, 0, "u 'gate::Event' - 1 - evt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RecoPulseCint_962_0_6, 85, G__get_linked_tagnum(&G__RecoPulseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RecoPulse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RecoPulseCint_962_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RecoPulse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RecoPulseCint_962_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RecoPulse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RecoPulseCint_962_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RecoPulse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RecoPulseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RecoPulseCint_962_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RecoPulseCint_962_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RecoPulse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RecoPulseCint_962_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RecoPulse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RecoPulseCint_962_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RecoPulse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RecoPulseCint_962_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RecoPulse::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RecoPulse", 914, G__RecoPulseCint_962_0_18, (int) ('i'), G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulse), -1, 0, 1, 1, 1, 0, "u 'RecoPulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RecoPulse", 1040, G__RecoPulseCint_962_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RecoPulseCint_962_0_20, (int) ('u'), G__get_linked_tagnum(&G__RecoPulseCintLN_RecoPulse), -1, 1, 1, 1, 1, 0, "u 'RecoPulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncRecoPulseCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {
}

static void G__cpp_setup_global7() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalRecoPulseCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
  G__cpp_setup_global7();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {
}

static void G__cpp_setup_func37() {
}

static void G__cpp_setup_func38() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcRecoPulseCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
  G__cpp_setup_func37();
  G__cpp_setup_func38();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__RecoPulseCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR = { "map<string,double,less<string>,allocator<pair<const string,double> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_gate = { "gate" , 110 , -1 };
G__linked_taginfo G__RecoPulseCintLN_gatecLcLVLEVEL = { "gate::VLEVEL" , 101 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_RPPulse = { "RPPulse" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_Qint = { "Qint" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_fixedTimeQWindow = { "fixedTimeQWindow" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_RecoPulseQ = { "RecoPulseQ" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOQintmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOQintmUgRsPgRsPgR = { "map<string,Qint*,less<string>,allocator<pair<const string,Qint*> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_timeDef = { "timeDef" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_thresholdTime = { "thresholdTime" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_RecoPulseTime = { "RecoPulseTime" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOtimeDefmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOtimeDefmUgRsPgRsPgR = { "map<string,timeDef*,less<string>,allocator<pair<const string,timeDef*> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_RecoPulsePed = { "RecoPulsePed" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_Algo = { "Algo" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_simpleWindow = { "simpleWindow" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_RecoManager = { "RecoManager" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOAlgomUgRsPgRsPgR = { "map<string,Algo*,less<string>,allocator<pair<const string,Algo*> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_allocatorlEstringgR = { "allocator<string>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR = { "vector<TObject*,allocator<TObject*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlETObjectmUcOallocatorlETObjectmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TObject*,allocator<TObject*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_gatecLcLtstorelEstringgR = { "gate::tstore<string>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR = { "map<string,string,less<string>,allocator<pair<const string,string> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_gatecLcLtstorelEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR = { "gate::tstore<vector<double,allocator<double> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR = { "map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_gatecLcLtstorelEvectorlEintcOallocatorlEintgRsPgRsPgR = { "gate::tstore<vector<int,allocator<int> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR = { "map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_gatecLcLtstorelEvectorlEstringcOallocatorlEstringgRsPgRsPgR = { "gate::tstore<vector<string,allocator<string> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR = { "map<string,vector<string,allocator<string> >,less<string>,allocator<pair<const string,vector<string,allocator<string> > > > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR = { "vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_gatecLcLParamStore = { "gate::ParamStore" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEgatecLcLPulsemUcOallocatorlEgatecLcLPulsemUgRsPgR = { "vector<gate::Pulse*,allocator<gate::Pulse*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLPulsemUcOallocatorlEgatecLcLPulsemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<gate::Pulse*,allocator<gate::Pulse*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR = { "vector<pair<double,double>,allocator<pair<double,double> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<double,double>,allocator<pair<double,double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEgatecLcLBHitmUcOallocatorlEgatecLcLBHitmUgRsPgR = { "vector<gate::BHit*,allocator<gate::BHit*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLBHitmUcOallocatorlEgatecLcLBHitmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<gate::BHit*,allocator<gate::BHit*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR = { "map<int,double,less<int>,allocator<pair<const int,double> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgR = { "vector<map<int,double,less<int>,allocator<pair<const int,double> > >,allocator<map<int,double,less<int>,allocator<pair<const int,double> > > > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<map<int,double,less<int>,allocator<pair<const int,double> > >,allocator<map<int,double,less<int>,allocator<pair<const int,double> > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEgatecLcLHitmUcOallocatorlEgatecLcLHitmUgRsPgR = { "vector<gate::Hit*,allocator<gate::Hit*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLHitmUcOallocatorlEgatecLcLHitmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<gate::Hit*,allocator<gate::Hit*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEgatecLcLBTrackmUcOallocatorlEgatecLcLBTrackmUgRsPgR = { "vector<gate::BTrack*,allocator<gate::BTrack*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLBTrackmUcOallocatorlEgatecLcLBTrackmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<gate::BTrack*,allocator<gate::BTrack*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEconstsPgatecLcLBTrackmUcOallocatorlEconstsPgatecLcLBTrackmUgRsPgR = { "vector<const gate::BTrack*,allocator<const gate::BTrack*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLBTrackmUcOallocatorlEconstsPgatecLcLBTrackmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<const gate::BTrack*,allocator<const gate::BTrack*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEconstsPgatecLcLBParticlemUcOallocatorlEconstsPgatecLcLBParticlemUgRsPgR = { "vector<const gate::BParticle*,allocator<const gate::BParticle*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLBParticlemUcOallocatorlEconstsPgatecLcLBParticlemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<const gate::BParticle*,allocator<const gate::BParticle*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEconstsPgatecLcLMCParticlemUcOallocatorlEconstsPgatecLcLMCParticlemUgRsPgR = { "vector<const gate::MCParticle*,allocator<const gate::MCParticle*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLMCParticlemUcOallocatorlEconstsPgatecLcLMCParticlemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<const gate::MCParticle*,allocator<const gate::MCParticle*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_gatecLcLEvent = { "gate::Event" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEgatecLcLHitMapmUcOallocatorlEgatecLcLHitMapmUgRsPgR = { "vector<gate::HitMap*,allocator<gate::HitMap*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLHitMapmUcOallocatorlEgatecLcLHitMapmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<gate::HitMap*,allocator<gate::HitMap*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEgatecLcLClustermUcOallocatorlEgatecLcLClustermUgRsPgR = { "vector<gate::Cluster*,allocator<gate::Cluster*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLClustermUcOallocatorlEgatecLcLClustermUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<gate::Cluster*,allocator<gate::Cluster*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEgatecLcLTrackmUcOallocatorlEgatecLcLTrackmUgRsPgR = { "vector<gate::Track*,allocator<gate::Track*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLTrackmUcOallocatorlEgatecLcLTrackmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<gate::Track*,allocator<gate::Track*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEgatecLcLParticlemUcOallocatorlEgatecLcLParticlemUgRsPgR = { "vector<gate::Particle*,allocator<gate::Particle*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLParticlemUcOallocatorlEgatecLcLParticlemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<gate::Particle*,allocator<gate::Particle*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEgatecLcLMCHitmUcOallocatorlEgatecLcLMCHitmUgRsPgR = { "vector<gate::MCHit*,allocator<gate::MCHit*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCHitmUcOallocatorlEgatecLcLMCHitmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<gate::MCHit*,allocator<gate::MCHit*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEgatecLcLMCTrackmUcOallocatorlEgatecLcLMCTrackmUgRsPgR = { "vector<gate::MCTrack*,allocator<gate::MCTrack*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCTrackmUcOallocatorlEgatecLcLMCTrackmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<gate::MCTrack*,allocator<gate::MCTrack*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEgatecLcLMCParticlemUcOallocatorlEgatecLcLMCParticlemUgRsPgR = { "vector<gate::MCParticle*,allocator<gate::MCParticle*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCParticlemUcOallocatorlEgatecLcLMCParticlemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<gate::MCParticle*,allocator<gate::MCParticle*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLHitmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLHitmUgRsPgRsPgR = { "multimap<gate::SENSORTYPE,gate::Hit*,less<gate::SENSORTYPE>,allocator<pair<const gate::SENSORTYPE,gate::Hit*> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLHitMapmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLHitMapmUgRsPgRsPgR = { "multimap<gate::SENSORTYPE,gate::HitMap*,less<gate::SENSORTYPE>,allocator<pair<const gate::SENSORTYPE,gate::HitMap*> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLClustermUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLClustermUgRsPgRsPgR = { "multimap<gate::SENSORTYPE,gate::Cluster*,less<gate::SENSORTYPE>,allocator<pair<const gate::SENSORTYPE,gate::Cluster*> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLTrackmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLTrackmUgRsPgRsPgR = { "multimap<gate::SENSORTYPE,gate::Track*,less<gate::SENSORTYPE>,allocator<pair<const gate::SENSORTYPE,gate::Track*> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_gatecLcLIAlgo = { "gate::IAlgo" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEgatecLcLIAlgomUcOallocatorlEgatecLcLIAlgomUgRsPgR = { "vector<gate::IAlgo*,allocator<gate::IAlgo*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLIAlgomUcOallocatorlEgatecLcLIAlgomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<gate::IAlgo*,allocator<gate::IAlgo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOgatecLcLIAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgatecLcLIAlgomUgRsPgRsPgR = { "map<string,gate::IAlgo*,less<string>,allocator<pair<const string,gate::IAlgo*> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR = { "map<string,bool,less<string>,allocator<pair<const string,bool> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOgatecLcLParamStorecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgatecLcLParamStoregRsPgRsPgR = { "map<string,gate::ParamStore,less<string>,allocator<pair<const string,gate::ParamStore> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_maplEstringcOTH1mUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1mUgRsPgRsPgR = { "map<string,TH1*,less<string>,allocator<pair<const string,TH1*> > >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR = { "vector<TH1*,allocator<TH1*> >" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH1*,allocator<TH1*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RecoPulseCintLN_RecoPulse = { "RecoPulse" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableRecoPulseCint() {
  G__RecoPulseCintLN_TClass.tagnum = -1 ;
  G__RecoPulseCintLN_TBuffer.tagnum = -1 ;
  G__RecoPulseCintLN_TMemberInspector.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_string.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_gate.tagnum = -1 ;
  G__RecoPulseCintLN_gatecLcLVLEVEL.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_RPPulse.tagnum = -1 ;
  G__RecoPulseCintLN_Qint.tagnum = -1 ;
  G__RecoPulseCintLN_fixedTimeQWindow.tagnum = -1 ;
  G__RecoPulseCintLN_RecoPulseQ.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOQintmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOQintmUgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_timeDef.tagnum = -1 ;
  G__RecoPulseCintLN_thresholdTime.tagnum = -1 ;
  G__RecoPulseCintLN_RecoPulseTime.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOtimeDefmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOtimeDefmUgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_RecoPulsePed.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_Algo.tagnum = -1 ;
  G__RecoPulseCintLN_simpleWindow.tagnum = -1 ;
  G__RecoPulseCintLN_RecoManager.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOAlgomUgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_allocatorlEstringgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlETObjectmUcOallocatorlETObjectmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_gatecLcLtstorelEstringgR.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_gatecLcLtstorelEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_gatecLcLtstorelEvectorlEintcOallocatorlEintgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_gatecLcLtstorelEvectorlEstringcOallocatorlEstringgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_gatecLcLParamStore.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEgatecLcLPulsemUcOallocatorlEgatecLcLPulsemUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLPulsemUcOallocatorlEgatecLcLPulsemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEgatecLcLBHitmUcOallocatorlEgatecLcLBHitmUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLBHitmUcOallocatorlEgatecLcLBHitmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEgatecLcLHitmUcOallocatorlEgatecLcLHitmUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLHitmUcOallocatorlEgatecLcLHitmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEgatecLcLBTrackmUcOallocatorlEgatecLcLBTrackmUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLBTrackmUcOallocatorlEgatecLcLBTrackmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEconstsPgatecLcLBTrackmUcOallocatorlEconstsPgatecLcLBTrackmUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLBTrackmUcOallocatorlEconstsPgatecLcLBTrackmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEconstsPgatecLcLBParticlemUcOallocatorlEconstsPgatecLcLBParticlemUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLBParticlemUcOallocatorlEconstsPgatecLcLBParticlemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEconstsPgatecLcLMCParticlemUcOallocatorlEconstsPgatecLcLMCParticlemUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLMCParticlemUcOallocatorlEconstsPgatecLcLMCParticlemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_gatecLcLEvent.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEgatecLcLHitMapmUcOallocatorlEgatecLcLHitMapmUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLHitMapmUcOallocatorlEgatecLcLHitMapmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEgatecLcLClustermUcOallocatorlEgatecLcLClustermUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLClustermUcOallocatorlEgatecLcLClustermUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEgatecLcLTrackmUcOallocatorlEgatecLcLTrackmUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLTrackmUcOallocatorlEgatecLcLTrackmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEgatecLcLParticlemUcOallocatorlEgatecLcLParticlemUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLParticlemUcOallocatorlEgatecLcLParticlemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEgatecLcLMCHitmUcOallocatorlEgatecLcLMCHitmUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCHitmUcOallocatorlEgatecLcLMCHitmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEgatecLcLMCTrackmUcOallocatorlEgatecLcLMCTrackmUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCTrackmUcOallocatorlEgatecLcLMCTrackmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEgatecLcLMCParticlemUcOallocatorlEgatecLcLMCParticlemUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCParticlemUcOallocatorlEgatecLcLMCParticlemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLHitmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLHitmUgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLHitMapmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLHitMapmUgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLClustermUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLClustermUgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLTrackmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLTrackmUgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_gatecLcLIAlgo.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEgatecLcLIAlgomUcOallocatorlEgatecLcLIAlgomUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLIAlgomUcOallocatorlEgatecLcLIAlgomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOgatecLcLIAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgatecLcLIAlgomUgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOgatecLcLParamStorecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgatecLcLParamStoregRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__RecoPulseCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__RecoPulseCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__RecoPulseCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__RecoPulseCintLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_maplEstringcOTH1mUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1mUgRsPgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR.tagnum = -1 ;
  G__RecoPulseCintLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RecoPulseCintLN_RecoPulse.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableRecoPulseCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_string);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_gate);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_gatecLcLVLEVEL);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_RPPulse);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_Qint),sizeof(Qint),-1,263425,(char*)NULL,G__setup_memvarQint,G__setup_memfuncQint);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_fixedTimeQWindow),sizeof(fixedTimeQWindow),-1,262400,(char*)NULL,G__setup_memvarfixedTimeQWindow,G__setup_memfuncfixedTimeQWindow);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_RecoPulseQ),sizeof(RecoPulseQ),-1,263424,(char*)NULL,G__setup_memvarRecoPulseQ,G__setup_memfuncRecoPulseQ);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOQintmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOQintmUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_timeDef),sizeof(timeDef),-1,263426,(char*)NULL,G__setup_memvartimeDef,G__setup_memfunctimeDef);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_thresholdTime),sizeof(thresholdTime),-1,263424,(char*)NULL,G__setup_memvarthresholdTime,G__setup_memfuncthresholdTime);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_RecoPulseTime),sizeof(RecoPulseTime),-1,263424,(char*)NULL,G__setup_memvarRecoPulseTime,G__setup_memfuncRecoPulseTime);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOtimeDefmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOtimeDefmUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_RecoPulsePed),sizeof(RecoPulsePed),-1,263424,(char*)NULL,G__setup_memvarRecoPulsePed,G__setup_memfuncRecoPulsePed);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_Algo),sizeof(Algo),-1,263435,(char*)NULL,G__setup_memvarAlgo,G__setup_memfuncAlgo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_simpleWindow),sizeof(simpleWindow),-1,262400,(char*)NULL,G__setup_memvarsimpleWindow,G__setup_memfuncsimpleWindow);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_RecoManager),sizeof(RecoManager),-1,263424,(char*)NULL,G__setup_memvarRecoManager,G__setup_memfuncRecoManager);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOAlgomUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_allocatorlEstringgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlETObjectmUcOallocatorlETObjectmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_gatecLcLtstorelEstringgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_gatecLcLtstorelEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_gatecLcLtstorelEvectorlEintcOallocatorlEintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_gatecLcLtstorelEvectorlEstringcOallocatorlEstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_gatecLcLParamStore);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEgatecLcLPulsemUcOallocatorlEgatecLcLPulsemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLPulsemUcOallocatorlEgatecLcLPulsemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEgatecLcLBHitmUcOallocatorlEgatecLcLBHitmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLBHitmUcOallocatorlEgatecLcLBHitmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRcOallocatorlEmaplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEgatecLcLHitmUcOallocatorlEgatecLcLHitmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLHitmUcOallocatorlEgatecLcLHitmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEgatecLcLBTrackmUcOallocatorlEgatecLcLBTrackmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLBTrackmUcOallocatorlEgatecLcLBTrackmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLBTrackmUcOallocatorlEconstsPgatecLcLBTrackmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLBTrackmUcOallocatorlEconstsPgatecLcLBTrackmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLBParticlemUcOallocatorlEconstsPgatecLcLBParticlemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLBParticlemUcOallocatorlEconstsPgatecLcLBParticlemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEconstsPgatecLcLMCParticlemUcOallocatorlEconstsPgatecLcLMCParticlemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEconstsPgatecLcLMCParticlemUcOallocatorlEconstsPgatecLcLMCParticlemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_gatecLcLEvent);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEgatecLcLHitMapmUcOallocatorlEgatecLcLHitMapmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLHitMapmUcOallocatorlEgatecLcLHitMapmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEgatecLcLClustermUcOallocatorlEgatecLcLClustermUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLClustermUcOallocatorlEgatecLcLClustermUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEgatecLcLTrackmUcOallocatorlEgatecLcLTrackmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLTrackmUcOallocatorlEgatecLcLTrackmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEgatecLcLParticlemUcOallocatorlEgatecLcLParticlemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLParticlemUcOallocatorlEgatecLcLParticlemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEgatecLcLMCHitmUcOallocatorlEgatecLcLMCHitmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCHitmUcOallocatorlEgatecLcLMCHitmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEgatecLcLMCTrackmUcOallocatorlEgatecLcLMCTrackmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCTrackmUcOallocatorlEgatecLcLMCTrackmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEgatecLcLMCParticlemUcOallocatorlEgatecLcLMCParticlemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLMCParticlemUcOallocatorlEgatecLcLMCParticlemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLHitmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLHitmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLHitMapmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLHitMapmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLClustermUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLClustermUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_multimaplEgatecLcLSENSORTYPEcOgatecLcLTrackmUcOlesslEgatecLcLSENSORTYPEgRcOallocatorlEpairlEconstsPgatecLcLSENSORTYPEcOgatecLcLTrackmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_gatecLcLIAlgo);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEgatecLcLIAlgomUcOallocatorlEgatecLcLIAlgomUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEgatecLcLIAlgomUcOallocatorlEgatecLcLIAlgomUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOgatecLcLIAlgomUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgatecLcLIAlgomUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOgatecLcLParamStorecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgatecLcLParamStoregRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_maplEstringcOTH1mUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1mUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RecoPulseCintLN_RecoPulse),sizeof(RecoPulse),-1,296192,(char*)NULL,G__setup_memvarRecoPulse,G__setup_memfuncRecoPulse);
}
extern "C" void G__cpp_setupRecoPulseCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupRecoPulseCint()");
  G__set_cpp_environmentRecoPulseCint();
  G__cpp_setup_tagtableRecoPulseCint();

  G__cpp_setup_inheritanceRecoPulseCint();

  G__cpp_setup_typetableRecoPulseCint();

  G__cpp_setup_memvarRecoPulseCint();

  G__cpp_setup_memfuncRecoPulseCint();
  G__cpp_setup_globalRecoPulseCint();
  G__cpp_setup_funcRecoPulseCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncRecoPulseCint();
  return;
}
class G__cpp_setup_initRecoPulseCint {
  public:
    G__cpp_setup_initRecoPulseCint() { G__add_setup_func("RecoPulseCint",(G__incsetup)(&G__cpp_setupRecoPulseCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initRecoPulseCint() { G__remove_setup_func("RecoPulseCint"); }
};
G__cpp_setup_initRecoPulseCint G__cpp_setup_initializerRecoPulseCint;

